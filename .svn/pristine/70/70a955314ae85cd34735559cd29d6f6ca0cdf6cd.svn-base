package com.neck_flexed.scripts.sire;

import com.neck_flexed.scripts.common.Boost;
import com.neck_flexed.scripts.common.breaking.BreakManager;
import com.neck_flexed.scripts.common.loot.Loot;
import com.neck_flexed.scripts.common.state.BaseState;
import com.neck_flexed.scripts.common.util;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.Coordinate;
import lombok.extern.log4j.Log4j2;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.regex.Pattern;

@Log4j2(topic = "LootTask")
public class LootState extends BaseState<SireState> {
    public static final Area lootArea = Area.rectangular(new Coordinate(2964, 4779, 0), new Coordinate(2976, 4771, 0));

    public static final List<String> mustLoot = Arrays.asList(
            "Unsired"
    );
    public static List<String> ignoreLoot = Arrays.asList(
            "Steel arrow",
            "Fiendish ashes",
            "Adamant javelin",
            "Uncut sapphire",
            "Uncut emerald",
            "Air talisman",
            "Body talisman",
            "Earth talisman",
            "Fire talisman",
            "Mind talisman",
            "Water talisman",
            "Cosmic talisman",
            "Chaos talisman",
            "Nature talisman");

    private final SireListener sireListener;
    private final sireBot bot;
    private final BreakManager breakManager;
    private Loot.LootResult result = Loot.LootResult.NotDone;

    public LootState(SireListener sireListener, sireBot bot, BreakManager breakManager) {
        super(SireState.LOOTING);
        this.sireListener = sireListener;
        this.bot = bot;
        this.breakManager = breakManager;
    }

    @Override
    public void activate() {
        bot.updateStatus("Looting");
        if (sireListener.getDeadArea() == null) return;
        util.moveTo(sireListener.getDeadArea().getCenter());
        Loot.waitForLoot(sireListener.getDeadArea(), Pattern.compile(".*"), 10000);

    }

    @Override
    public void deactivate() {
        log.debug(String.format("Time until break: %s", this.breakManager.timeLeft()));
        bot.resetKill();
        if (this.result.equals(Loot.LootResult.Full))
            bot.forceState(SireState.RESTORING);
    }

    @Override
    public @Nullable String fatalError() {
        return null;
    }

    @Override
    public boolean done() {
        return !Objects.equals(this.result, Loot.LootResult.NotDone);
    }

    @Override
    public void executeLoop() {
        var ignoreLootCpy = new ArrayList<String>(ignoreLoot);
        if (!bot.settings().lootAshes()) {
            ignoreLootCpy.add("Abyssal ashes");
        }
        this.result = Loot.doLoop(
                this.sireListener.getDeadArea()
                , util.concatenate(
                        util.toPatternArray(ignoreLootCpy),
                        util.parseCsvRegexString(bot.settings().neverLoot())
                )
                , util.concatenate(
                        util.toPatternArray(mustLoot),
                        util.parseCsvRegexString(bot.settings().alwaysLoot())
                )
                , bot.settings().minAlchValue()
                , bot.settings().phase1Boost().equals(Boost.ImbuedHeart)
                        ? new Pattern[0]
                        : bot.settings().phase1Boost().patternAny()
        );

    }
}
