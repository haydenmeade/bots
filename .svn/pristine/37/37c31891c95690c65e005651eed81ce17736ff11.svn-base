package com.neck_flexed.scripts.sire;

import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.input.direct.MenuAction;
import com.runemate.game.api.hybrid.input.direct.MenuOpcode;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import com.runemate.game.api.script.framework.listeners.EngineListener;
import lombok.extern.log4j.Log4j2;

import java.util.concurrent.ThreadLocalRandom;

@Log4j2(topic = "PrayerFlicker")

public class PrayerFlicker implements EngineListener {

    @Override
    public void onTickStart() {
        try {
            // turn off
            for (Prayer p :
                    Prayer.getActivePrayers()) {
                if (!SireState.getActivePrayers().stream().anyMatch(prayer ->
                        prayer.name() == p.name())) {
                    log.debug(String.format("Prayer off: %s", p.name()));
                    DirectInput.send(MenuAction.forInterfaceComponent(p.getComponent(), 0, MenuOpcode.CC_OP));
                }
            }

            // flick
            for (Prayer p : SireState.getActivePrayers()) {
                var active = p.isActivated();
                DirectInput.send(MenuAction.forInterfaceComponent(p.getComponent(), 0, MenuOpcode.CC_OP));

                if (active) {
                    new java.util.Timer().schedule(
                            new java.util.TimerTask() {
                                @Override
                                public void run() {
                                    DirectInput.send(MenuAction.forInterfaceComponent(p.getComponent(), 0, MenuOpcode.CC_OP));
                                }
                            },
                            ThreadLocalRandom.current().nextInt(13, 43)
                    );
                } else {
                    log.debug(String.format("Prayer on: %s", p.name()));
                }
            }
        } catch (Exception e) {
            log.error("Prayer flicker", e);
        }


    }

}
