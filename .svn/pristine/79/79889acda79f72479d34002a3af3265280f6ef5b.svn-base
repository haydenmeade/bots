package com.neck_flexed.scripts.common.traverse;

import com.neck_flexed.scripts.common.HouseConfig;
import com.neck_flexed.scripts.common.util;
import com.runemate.game.api.hybrid.local.Rune;
import com.runemate.game.api.hybrid.local.Skill;
import com.runemate.game.api.hybrid.local.Spell;
import com.runemate.game.api.hybrid.local.hud.interfaces.Inventory;
import com.runemate.game.api.hybrid.local.hud.interfaces.SpriteItem;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.osrs.local.hud.interfaces.Magic;
import com.runemate.game.api.script.Execution;
import lombok.extern.log4j.Log4j2;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.regex.Pattern;

@Log4j2
public class TeleportTraverse implements TraverseMethod {
    public static final TeleportTraverse LASSAR_TRAVERSE =
            new TeleportTraverse(Magic.Ancient.LASSAR_TELEPORT, 72, Rune.WATER, Rune.LAW);
    public static final TeleportTraverse VARROCK_TRAVERSE =
            new TeleportTraverse(Magic.VARROCK_TELEPORT, 35, Rune.AIR, Rune.FIRE, Rune.LAW);
    public static final TeleportTraverse LUMBRIDGE_TRAVERSE =
            new TeleportTraverse(Magic.LUMBRIDGE_TELEPORT, 31, Rune.LAW, Rune.EARTH, Rune.AIR);
    public static final TeleportTraverse FALADOR_TRAVERSE =
            new TeleportTraverse(Magic.FALADOR_TELEPORT, 37, Rune.LAW, Rune.WATER, Rune.AIR);
    public static final TeleportTraverse HOUSE_TRAVERSE =
            new TeleportTraverse(Magic.TELEPORT_TO_HOUSE, 40, Rune.LAW, Rune.EARTH, Rune.AIR);
    private final Spell spell;
    private final Rune[] runes;
    private final int magicLevel;

    public TeleportTraverse(Spell spell, int magicLevel, Rune... runes) {
        this.spell = spell;
        this.runes = runes;
        this.magicLevel = magicLevel;
    }

    private static boolean canSwap() {
        return Magic.Book.LUNAR.isCurrent() && Skill.MAGIC.getCurrentLevel() >= 96
                && Rune.ASTRAL.getQuantity() >= 3 && Rune.COSMIC.getQuantity() >= 2 && Rune.LAW.getQuantity() >= 1;
    }

    private static String getSpellbookSwapName(Magic.Book book) {
        switch (book) {
            case STANDARD:
                return "Standard";
            case ANCIENT:
                return "Ancient";
            case ARCEUUS:
                return "Arceuus";
        }
        return null;
    }

    @Override
    public String toString() {
        return "Teleport Traverse (Runes/Tabs): " + spell;
    }

    @Override
    public Collection<Requirement> requirements(HouseConfig houseConfig) {
        var l = new ArrayList<Requirement>();
        l.add(new BaseRequirement(Pattern.compile("^" + this.spell.name() + "$")));
        l.add(new SpellRequirement(this.spell, this.magicLevel, this.runes));
        return l;
    }

    @Override
    public boolean doTraverseLoop(HouseConfig houseConfig, Coordinate startPosition) {
        var currReg = Players.getLocal().getServerPosition().getContainingRegionId();
        if (currReg != startPosition.getContainingRegionId()) return true;
        if (Inventory.contains(spell.name())) {
            var tab = Inventory.getItems(spell.name()).first();
            if (tab == null || !tab.interact("Break")) {
                log.error("Teleport tab error {}", spell);
                return false;
            }
            return Execution.delayUntil(() -> Players.getLocal().getServerPosition().getContainingRegionId() != startPosition.getContainingRegionId(),
                    util::playerAnimating, 1200, 2400);
        }
        var spellBookActive = spell.getSpellBook().isCurrent();
        var canSwap = canSwap();
        if (!spellBookActive && canSwap) {
            if (!Magic.Lunar.SPELLBOOK_SWAP.activate(getSpellbookSwapName((Magic.Book) spell.getSpellBook()))) {
                log.error("Unable to spellbook swap to {} for {}", spell.getSpellBook(), spell);
                return false;
            }
            Execution.delayUntil(() -> spell.getSpellBook().isCurrent(),
                    util::playerAnimating, 1200, 2400);
            return false;
        }
        if (!spell.activate()) {
            log.error("Unable to activate spell {}", spell);
            return false;
        }
        return Execution.delayUntil(() -> Players.getLocal().getServerPosition().getContainingRegionId() != startPosition.getContainingRegionId(),
                util::playerAnimating, 1200, 2400);
    }

    private static class SpellRequirement implements Requirement {
        private final Spell spell;
        private final int magicLevel;
        private final List<Rune> runes;

        public SpellRequirement(Spell spell, int magicLevel, Rune... runes) {
            this.spell = spell;
            this.magicLevel = magicLevel;
            this.runes = List.of(runes);

        }

        @Override
        public Collection<Pattern> items() {
            return Collections.emptyList();
        }

        @Override
        public Collection<Rune> runes() {
            return runes;
        }

        @Override
        public boolean isHouse() {
            return false;
        }

        @Override
        public boolean meetsRequirement(HouseConfig houseConfig, Collection<SpriteItem> spriteItems) {
            var hasRunes = runes.stream().allMatch(r -> r.getQuantity() > 10);
            var spellBookActive = spell.getSpellBook().isCurrent();
            var canSwap = canSwap();
            return hasRunes && Skill.MAGIC.getCurrentLevel() >= magicLevel && (spellBookActive || canSwap) &&
                    Requirement.super.meetsRequirement(houseConfig, spriteItems);
        }
    }
}
