package com.neck_flexed.scripts.sire;

import com.neck_flexed.scripts.common.*;
import com.neck_flexed.scripts.common.breaking.BreakHandlerState;
import com.neck_flexed.scripts.common.breaking.BreakManager;
import com.neck_flexed.scripts.common.loadout.Loadout;
import com.neck_flexed.scripts.common.loadout.Loadouts;
import com.neck_flexed.scripts.common.state.HoppingState;
import com.neck_flexed.scripts.common.state.IStateManager;
import com.neck_flexed.scripts.common.state.LoopState;
import com.runemate.game.api.hybrid.local.hud.interfaces.Inventory;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.hybrid.region.SpotAnimations;
import com.runemate.ui.DefaultUI;
import com.runemate.ui.setting.annotation.open.SettingsProvider;
import javafx.scene.text.Text;
import lombok.extern.log4j.Log4j2;
import org.apache.commons.lang3.tuple.Triple;

import java.util.EventListener;
import java.util.regex.Pattern;

@Log4j2(topic = "SireMain")
public class sireBot extends NeckBot<SireSettings, SireState> {
    public static final int SireId_Phase0 = 5886;
    public static final Coordinate leftSide = new Coordinate(2958, 4775);
    public static final Coordinate rightSide = new Coordinate(2979, 4775);
    public static final int SireId_Phase1_Awake = 5887;
    public static final int SireId_Phase1_Stunned = 5888;
    public static final int SireId_Phase2or3_Walk = 5889;
    public static final int SireId_Phase2 = 5890;
    public static final int SireId_Phase3_1 = 5891;
    public static final int SireId_Phase3_2 = 5908;
    public static final int MiasmaSpot = 1275;
    public static final Area abyssalNexus = Area.rectangular(new Coordinate(2947, 4863), new Coordinate(3130, 4737));
    public static final Area fightArea = Area.rectangular(new Coordinate(2949, 4796), new Coordinate(2988, 4763));
    public static final Area sirePhase2Area = Area.rectangular(new Coordinate(2965, 4789), new Coordinate(2975, 4779));
    public static final String Respiratory = "Respiratory system";
    public static final int RespId = 5914;
    public static final Area castleWars = Area.rectangular(new Coordinate(2433, 3099), new Coordinate(2447, 3080));
    public SireListener sireListener;
    @SettingsProvider(updatable = true)
    private SireSettings settings;
    private Consumeables<SireSettings, SireState> consumeables;

    public static boolean onMiasmaPool() {
        return !SpotAnimations.newQuery().on(Players.getLocal().getPosition()).ids(sireBot.MiasmaSpot).results().isEmpty();
    }

    public void updateStatus(String s) {
        var debugStr = String.format("%s - Sire KC: %d", s, this.getKillCount());
        log.debug(debugStr);
        DefaultUI.setStatus(debugStr);
    }

    @Override
    public SireSettings settings() {
        return this.settings;
    }

    @Override
    protected EventListener[] getEventListenerForRunning() {
        return new EventListener[
                ]{
                this.prayerFlicker,
                this.sireListener,
                this.consumeables,
                this.junkDropper
        };
    }

    @Override
    public void resetKill() {
        Action.set(Action.None);
        this.prayerFlicker.disable();
        this.sireListener.reset();
    }

    @Override
    protected void initFromSettings(SireSettings settings) {
        this.loadouts = Loadouts.fromEquipmentLoadouts(
                Triple.of(settings().phase1Equipment(), Loadout.LoadoutRole.Combat, Phase.Phase1.toString()),
                Triple.of(settings().phase2Equipment(), Loadout.LoadoutRole.Combat, Phase.Phase2.toString()),
                Triple.of(settings().specDefenceEquipment(), Loadout.LoadoutRole.SpecDefenseReduction, "SpecDefence"),
                Triple.of(settings().specDpsEquipment(), Loadout.LoadoutRole.SpecDps, "SpecDps")
        );
        this.breakManager = new BreakManager(settings, this);
        updateItemFilter(util.concatenate(
                util.toPatternArray(new String[]{items.houseTab,
                        settings.food().gameName()}),
                new Pattern[]{Pattern.compile("Stamina potion.*"), items.ringOfDueling, items.dramenStaff,},
                util.toItemList(settings.phase2Equipment()),
                util.toItemList(settings.phase1Equipment()),
                util.toItemList(settings.specDefenceEquipment()),
                util.toItemList(settings.specDpsEquipment())
        ));
    }

    public boolean doWeNeedToRestock() {
        if (settings() == null) return false;
        var boost = settings().phase1Boost();
        if (boost != Boost.None && boost != Boost.ImbuedHeart && Inventory.getItems(boost.patternAny()).isEmpty()) {
            return true;
        }
        if (Food.countInventory() < settings().minFood()) {
            return true;
        }
        return false;
    }

    protected LoopState<SireState> getState(SireState s) {
        switch (s) {
            case STARTING:
                return new StartingState(this);
            case TRAVERSING:
                return new TraverseState(this);
            case FIGHTING:
                return new FightState(this, this.loadouts, this.sireListener, this.prayerFlicker);
            case LOOTING:
                return new LootState(this.sireListener, this, this.breakManager);
            case RESTORING:
                return new RestoreState(this, this.prayerFlicker);
            case HOPPING:
                return new HoppingState<>(this, settings().worldRegion(), SireState.HOPPING);
            case RESTOCKING:
                return new RestockState(this);
            case BREAKING:
                return new BreakHandlerState<>(this.breakManager, this, SireState.BREAKING);
            default:
                throw new IllegalStateException("Unexpected value: " + s);
        }
    }


    @Override
    protected LoopState<SireState> getStartingState() {
        return new StartingState(this);
    }

    @Override
    protected SireState getBreakStateEnum() {
        return SireState.BREAKING;
    }

    @Override
    protected SireState getStartStateEnum() {
        return SireState.STARTING;
    }

    @Override
    protected IStateManager<SireState> createStateManager() {
        return new SireStateManager(this, sireListener);
    }

    @Override
    public void onStart(String... arguments) {
        super.onStart(arguments);
        log.debug("onStart");

        this.getEventDispatcher().addListener(this);
        this.breakManager = new BreakManager(settings, this);
        this.prayerFlicker = new PrayerFlicker();
        this.consumeables = new Consumeables<>(this, 41, SireState.RESTORING);
        this.sireListener = new SireListener(this);

        DefaultUI.addPanel(0, this, "Instructions", new Text(
                "Requires: Abyssal Sire or Abyssal demon slayer task. Ornate pool, Jewellery box, and fairy ring in house.\n" +
                        "Start with gear, shadow barrage runes, with ancient spellbook, and house tabs in inventory.\n" +
                        "You'll most likely need stams in bank.\n"
        ));

    }

}
