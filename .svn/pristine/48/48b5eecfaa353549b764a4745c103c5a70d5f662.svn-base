package com.neck_flexed.scripts.hydra;

import com.neck_flexed.scripts.common.Antipoison;
import com.neck_flexed.scripts.common.Boost;
import com.neck_flexed.scripts.common.BreakSettings;
import com.neck_flexed.scripts.common.Food;
import com.runemate.game.api.hybrid.EquipmentLoadout;
import com.runemate.game.api.osrs.location.WorldRegion;
import com.runemate.ui.setting.annotation.open.Setting;
import com.runemate.ui.setting.annotation.open.SettingsGroup;
import com.runemate.ui.setting.annotation.open.SettingsSection;
import com.runemate.ui.setting.open.Settings;

@SettingsGroup()
public interface HydraSettings extends Settings, BreakSettings {

    @SettingsSection(title = "Breaking", description = "Settings for breaking and stopping", order = 2)
    String breaking = "Breaking";

    @Setting(key = "Region", title = "World Region", order = 0)
    default WorldRegion worldRegion() {
        return WorldRegion.AUSTRALIA;
    }

    @Setting(key = "Boost", title = "Boost", order = 1)
    default Boost boost() {
        return Boost.Ranging;
    }

    @Setting(key = "BoostAmnt", title = "Boost Amount", order = 1)
    default int boostAmount() {
        return 4;
    }

    @Setting(key = "Food", title = "Food", order = 5)
    default Food food() {
        return Food.Shark;
    }

    @Setting(key = "FoodAmn", title = "Food Amount", order = 5)
    default int foodAmount() {
        return 8;
    }

    @Setting(key = "minfood", title = "Min food for kill", order = 6)
    default int minFood() {
        return 1;
    }

    @Setting(key = "Antipoison", title = "Antipoison", order = 7)
    default Antipoison antipoison() {
        return Antipoison.ANTIDOTEPP;
    }

    @Setting(key = "AntipoisonAmount", title = "Antipoison Amount", order = 8)
    default int antipoisonAmount() {
        return 2;
    }

    @Setting(key = "BankMethod", title = "BankMethod", order = 10)
    default RestoreAndBankMethod restoreAndBankStrategy() {
        return RestoreAndBankMethod.House;
    }

    @Setting(key = "TraverseStrategy", title = "TraverseStrategy", order = 11)
    default TraverseStrategy traverseStrategy() {
        return TraverseStrategy.RadasBlessing;
    }

    @Setting(key = "Bones", title = "Bury, Bank or ignore bones", order = 12)
    default BoneStrategy boneStrategy() {
        return BoneStrategy.Bury;
    }

    @Setting(key = "minalchvaue", title = "Loot Minimum Alch Value", order = 13)
    default int minAlchValue() {
        return 0;
    }

    @Setting(key = "Equipment", title = "Equipment", converter = EquipmentLoadout.SettingConverter.class, order = 14)
    default EquipmentLoadout equipment() {
        return null;
    }

    @Setting(key = "Spec", title = "Spec Equipment", converter = EquipmentLoadout.SettingConverter.class, order = 15)
    default EquipmentLoadout specEquipment() {
        return null;
    }

    @Setting(key = "bosFlick", title = "Bring bracelets of slaughter to flick", order = 16)
    default int braceletsOfSlaughter() {
        return 2;
    }

}
