package com.neck_flexed.scripts.slayer.state;

import com.neck_flexed.scripts.common.SlayerTask;
import com.neck_flexed.scripts.common.loot.Loot;
import com.neck_flexed.scripts.common.state.StateManager;
import com.neck_flexed.scripts.common.util;
import com.neck_flexed.scripts.slayer.Monster;
import com.neck_flexed.scripts.slayer.MonsterLoadoutOverrider;
import com.neck_flexed.scripts.slayer.SlayerUtil;
import com.neck_flexed.scripts.slayer.bot;
import com.runemate.game.api.client.ClientUI;
import com.runemate.game.api.hybrid.local.hud.interfaces.Bank;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.osrs.local.hud.interfaces.Magic;
import com.runemate.game.api.script.Execution;
import lombok.extern.log4j.Log4j2;

import java.util.Collections;
import java.util.EnumSet;
import java.util.Set;

@Log4j2
public class SlayerStateManager extends StateManager<com.neck_flexed.scripts.slayer.bot, SlayerState> {
    private static final Set<SlayerState> SPELLBOOK_INITIATORS = Collections.unmodifiableSet(EnumSet.of(SlayerState.GET_MASTER_TASK, SlayerState.RESTOCKING));

    public SlayerStateManager(bot bot) {
        super(bot);
    }

    @Override
    public SlayerState getNextState(SlayerState initiator) {
        var p = Players.getLocal();
        if (p == null) return SlayerState.STARTING;
        var task = SlayerTask.getCurrent();
        var monster = Monster.fromSlayerTask(bot.getOverrideTask());
        var settings = bot.settings();
        bot.loadouts.setLoadoutOverrider(new MonsterLoadoutOverrider(monster.orElse(null)));
        bot.refreshProgress();

        // ** COMBAT:
        var m = monster.orElse(bot.getPreviousTask());
        var isSuperiorPresent = m != null && m.isSuperiorPresent(bot);
        switch (initiator) {
            case BARRAGING:
            case FIGHTING:
                return SlayerState.LOOTING;
            case LOOTING:
                if (!SlayerTask.hasTask() && !isSuperiorPresent) {
                    return SlayerState.PICK_UP_CANNON;
                } else if (!isSuperiorPresent && (bot.doWeNeedToRestock(true) || bot.breakManager.breaking() || bot.breakManager.stopBot() || Loot.cantLootMore())) {
                    return SlayerState.PICK_UP_CANNON;
                } else if (monster.isPresent() && monster.get().getLocation(bot).isBarrage()) {
                    return SlayerState.LURING;
                } else {
                    return SlayerState.FIGHTING;
                }
            case PICK_UP_CANNON:
                if (isSuperiorPresent) return SlayerState.FIGHTING;
                if (!SlayerTask.hasTask() && !isSuperiorPresent) {
                    if (bot.npcContactAvailable() && !Magic.Book.LUNAR.isCurrent()) {
                        return SlayerState.SWITCH_SPELLBOOK;
                    }
                    return SlayerState.GET_NEW_TASK;
                }
                return SlayerState.RESTORING;
            case STACKING:
                return SlayerState.BARRAGING;
            case LURING:
                return SlayerState.STACKING;
            case RESTORING:
                if (bot.breakManager.breaking() || bot.breakManager.stopBot())
                    return SlayerState.BREAKING;
                return SlayerState.RESTOCKING;
            case GET_NEW_TASK:
                // get master task
                return SlayerState.GET_MASTER_TASK;
        }


        if (SlayerTask.hasTask()) {
            // Unhandled task
            if (monster.isEmpty() || SlayerUtil.doesTaskMatch(task, bot.settings().skipTaskList(), bot.settings().stopOnAnyBoss())) {
                var skipsEnabled = monster.isEmpty() ? settings.skipTasksEnabled() && settings.skipUnhandled() : settings.skipTasksEnabled();
                if (SlayerUtil.doesTaskMatch(task, bot.settings().stopOnTasks(), bot.settings().stopOnAnyBoss())) {
                    var msg = String.format("Got Task we wanted: %s %s from %s", SlayerTask.getCount(), task, bot.settings().master());
                    log.info(msg);
                    bot.updateStatus(msg);
                    ClientUI.showAlert(ClientUI.AlertLevel.INFO, msg);
                    Execution.delay(3000);
                    bot.stop(msg);
                    return SlayerState.BREAKING;
                } else if (skipsEnabled && settings.skipTasksWithTurael()) {
                    // turael skip
                    return SlayerState.GET_TURAEL_TASK;
                } else if (skipsEnabled) {
                    if (util.hasAnyTraverse(settings.master().getTraverses(), bot.getHouseConfig()))
                        return SlayerState.SKIP_TASK;
                    else if (!util.isFullyRestored())
                        return SlayerState.RESTOCKING;
                    return SlayerState.RESTORING;
                } else {
                    var msg = String.format("Stopping due to unhandled task: %s", task);
                    bot.updateStatus(msg);
                    Execution.delay(3000);
                    bot.stop(msg);
                    return SlayerState.BREAKING;
                }
            } else {
                var monsterInstance = monster.get();
                var location = monsterInstance.getLocation(bot);
                if (monsterInstance.getLocation(bot).isBarrage()) {
                    if (location.getArea().contains(p)) {
                        if (util.anyOtherPlayersWithin(location.getArea()))
                            return SlayerState.HOPPING;
                        return SlayerState.LURING;
                    }
                } else if (location.getArea().contains(p)) {
                    if (!monsterInstance.isHoppingDisabled() && util.anyOtherPlayersWithin(location.getArea())
                            && Players.getLocal().getHealthGauge() == null)
                        return SlayerState.HOPPING;
                    return SlayerState.FIGHTING;
                }
            }
        }
        if (Bank.isOpen()) return SlayerState.RESTOCKING;

        // has valid task, not in area yet:
        if (monster.isPresent()) {
            // spellbook swap check
            var desiredSpellbook = bot.getDesiredSpellbook(monster.get(), bot.getHouseConfig());
            if (!desiredSpellbook.isCurrent()) {
                return SlayerState.SWITCH_SPELLBOOK;
            }
        }


        boolean needsRestock = bot.doWeNeedToRestock(false);
        if (initiator != SlayerState.RESTOCKING && needsRestock) {
            if (util.isFullyRestored())
                return SlayerState.RESTOCKING;
            return SlayerState.RESTORING;
        }

        // need new task -> go to master and get a task
        if (!SlayerTask.hasTask()) {
            if (bot.npcContactAvailable() && !Magic.Book.LUNAR.isCurrent()) {
                return SlayerState.SWITCH_SPELLBOOK;
            }
            return SlayerState.GET_NEW_TASK;
        }

        return SlayerState.TRAVERSING;
    }

}
