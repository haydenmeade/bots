package com.neck_flexed.scripts.slayer.barrage;

import com.neck_flexed.scripts.common.*;
import com.neck_flexed.scripts.common.loadout.Loadout;
import com.neck_flexed.scripts.common.loadout.Loadouts;
import com.neck_flexed.scripts.common.state.BaseState;
import com.neck_flexed.scripts.slayer.SlayerBot;
import com.neck_flexed.scripts.slayer.state.FightState;
import com.neck_flexed.scripts.slayer.state.SlayerState;
import com.runemate.game.api.hybrid.entities.Actor;
import com.runemate.game.api.hybrid.entities.Npc;
import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.local.hud.interfaces.Health;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.osrs.local.hud.interfaces.Magic;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import com.runemate.game.api.script.framework.listeners.EngineListener;
import com.runemate.game.api.script.framework.listeners.NpcListener;
import com.runemate.game.api.script.framework.listeners.events.DeathEvent;
import lombok.extern.log4j.Log4j2;
import org.jetbrains.annotations.Nullable;

import java.util.EventListener;
import java.util.Objects;

@Log4j2(topic = "FightState")
public class BarrageState extends BaseState<SlayerState> implements EngineListener, NpcListener {
    private final NeckBot<?, SlayerState> bot;
    private final BarrageListener barrageListener;
    private final PrayerFlicker prayerFlicker;
    private final NeckSpell spell;
    private final int reboost;
    private final SlayerBot slayerBot;
    private final Loadouts loadouts;
    private final Monster monster;
    private final Prayer[] boostPrayers;
    private final Loadout loadout;
    private int tick = 0;
    private int lastSpellCast = -5;

    public BarrageState(NeckBot<?, SlayerState> bot,
                        BarrageListener barrageListener,
                        PrayerFlicker prayerFlicker,
                        Loadout loadout,
                        Monster monster,
                        NeckSpell spell,
                        int reboost,
                        @Nullable SlayerBot slayerBot
    ) {
        super(SlayerState.BARRAGING);
        this.bot = bot;
        this.loadouts = bot.loadouts;
        this.loadout = loadout;
        this.barrageListener = barrageListener;
        this.monster = monster;
        this.prayerFlicker = prayerFlicker;
        this.spell = spell;
        this.reboost = reboost;
        this.slayerBot = slayerBot;
        this.boostPrayers = new Prayer[]{util.getMagicBoostPrayer()};
    }

    @Override
    public EventListener[] getEventListeners() {
        return new EventListener[]{this, barrageListener};
    }

    @Override
    public void deactivate() {
        log.debug("deactivate, targeting: {}", this.barrageListener.getTargetingMe().size());
    }

    @Override
    public void activate() {
        bot.updateStatus("Barraging");
        this.prayerFlicker.setActivePrayers(util.joinPrayers(this.boostPrayers, Prayer.PROTECT_FROM_MELEE));
        if (util.isAutoRetaliateEnabled())
            util.toggleAutoRetaliate();
    }

    @Override
    public void onNpcDeath(DeathEvent event) {
        var npc = (Npc) event.getSource();
        var currentTarget = (Npc) Players.getLocal().getTarget();
        slayerBot.handleNpcDeath(monster, npc, currentTarget);
    }

    @Override
    public String fatalError() {
        return null;
    }

    @Override
    public boolean done() {
        var targeting = this.barrageListener.getTargetingMe();
        if (monster.isSuperiorPresent()) return false;
        if (targeting.size() == 0) return true;
        if (targeting.size() > 4) return false;
        var targetingWithHealthUnder35 = (int) targeting.stream().filter(
                n -> {
                    var hp = n.getHealthGauge();
                    if (hp == null) return true;
                    return hp.getPercent() < 45;
                }
        ).count();
        return targetingWithHealthUnder35 < 2;
    }

    @Override
    public void onTickStart() {
        try {
            tick++;
            var p = Players.getLocal();
            if (p == null) return;
            var pos = p.getServerPosition();
            if (pos == null) return;
            util.boostIfNeeded(CombatStyle.Magic, reboost);
            if (monster.equals(Monster.Nechryael) && monster.isSuperiorPresent()) {
                handleNechryarch();
                return;
            }
            var bestTarget = this.barrageListener.getBestTarget();
            if (bestTarget == null) return;
            loadouts.equip(loadout);
            castSpell(bestTarget, p.getTarget());
        } catch (Exception e) {
            log.error(e);
            e.printStackTrace();
        }
    }

    private void handleNechryarch() {
        var npc = FightState.setSuperiorTarget(monster.getSuperior());
        if (npc == null) return;
        var p = Players.getLocal();
        if (p == null) return;
        log.debug("nechryarch {}", npc);
        loadouts.equip(loadout);

        Coordinate moveTo1 = new Coordinate(1704, 10081, 0);
        Coordinate moveTo2 = new Coordinate(1697, 10081, 0);
        if (npc.distanceTo(p) < 3 || npc.isMoving()) {
            if (p.getServerPosition().getX() > moveTo1.getX())
                util.moveTo(moveTo1);
            else
                util.moveTo(moveTo2);
            return;
        }

        castSpell(npc, p.getTarget());
    }


    private Magic.Ancient getSpell() {
        if (Health.getCurrentPercent() < 50 && util.hasBloodRunes()) {
            return util.getBloodSpell();
        }
        return spell.getSpell();
    }

    private void castSpell(Npc npc, Actor target) {
        var sp = getSpell();
        if (sp == null) return;
        var isBlood = Objects.equals(util.getBloodSpell(), sp);
        if (tick > 20 && !spell.canCast()) {
            log.debug("Can cast force to restore");
            bot.forceState(SlayerState.RESTORING);
        }
        if (sp.isAutocasting() && !isBlood) {
            if (Objects.equals(target, npc)) return;
            util.attack(npc);
            return;
        }

        if (tick >= (lastSpellCast + 5)) {
            log.debug("Spell {} on {}", sp, npc);
            DirectInput.sendSpellCastOn(sp, npc);
            this.lastSpellCast = tick;
        }
    }

    @Override
    public void executeLoop() {
    }
}
