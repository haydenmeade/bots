package com.neck_flexed.scripts.common.traverse;

import com.neck_flexed.scripts.common.HouseConfig;
import com.neck_flexed.scripts.common.items;
import com.neck_flexed.scripts.common.util;
import com.runemate.game.api.hybrid.entities.GameObject;
import com.runemate.game.api.hybrid.local.hud.interfaces.Equipment;
import com.runemate.game.api.hybrid.local.hud.interfaces.Inventory;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.script.Execution;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collection;

@Log4j2
public class SpiritTreeTraverse implements TraverseMethod {
    private static final Area ardyCloakTele = new Area.Rectangular(new Coordinate(2540, 3265, 0), new Coordinate(2620, 3209, 0));
    private final Destination destination;
    private Traverser traverser;

    public SpiritTreeTraverse(Destination destination) {
        this.destination = destination;
    }

    public static boolean ardyCloakTele() {
        var cl = Inventory.contains(items.argdougneCloak)
                ? Inventory.getItems(items.argdougneCloak).first()
                : Equipment.getItems(items.argdougneCloak).first();
        if (cl == null) {
            log.error("no ardy cloak");
            return false;
        }
        if (cl.interact("Monastery Teleport"))
            return Execution.delayUntil(() -> ardyCloakTele.contains(Players.getLocal()), util::playerAnimating, 2000, 3000);
        return false;
    }

    @Override
    public Collection<Requirement> requirements(HouseConfig houseConfig) {
        var l = new ArrayList<Requirement>();
        l.add(new HouseRequirement(HouseConfig::isHasSpiritTree));
        l.add(new BaseRequirement(items.argdougneCloak));
        return l;
    }

    @Override
    public boolean doTraverseLoop(HouseConfig houseConfig, Coordinate startPosition) {
        GameObject tree = getSpiritTree();
        if (tree != null) {
            return spiritTreeTo(tree, this.destination, startPosition);
        }
        if (houseConfig.isHasSpiritTree()) {
            util.teleToHouse();
        } else if (Inventory.contains(items.argdougneCloak) || Equipment.contains(items.argdougneCloak)) {
            var pos = Players.getLocal().getServerPosition();
            if (ardyCloakTele.contains(pos)) {
                if (this.traverser == null)
                    this.traverser = Traverser.regionPathTraverser(new Coordinate(2554, 3255, 0));
                traverser.executeLoop();
            } else {
                ardyCloakTele();
            }
        }
        return false;
    }

    private boolean spiritTreeTo(GameObject tree, Destination destination, Coordinate startPosition) {
        return false;
    }

    private GameObject getSpiritTree() {
        return null;
    }

    @Getter
    @RequiredArgsConstructor
    public enum Destination {
        TreeGnomeVillage("Tree Gnome Village", KeyEvent.VK_1),
        GnomeStronghold("Gnome Stronghold", KeyEvent.VK_2),
        BattlefieldOfKhazard("Battlefield of Khazard", KeyEvent.VK_3),
        GrandExchange("Grand Exchange", KeyEvent.VK_4),
        FeldipHill("Feldip Hill", KeyEvent.VK_5),
        Prifddinas("Prifddinas", KeyEvent.VK_6),
        Etceteria("Etceteria", KeyEvent.VK_7),
        PortSarim("Port Sarim", KeyEvent.VK_9),
        Brimhaven("Brimhaven", KeyEvent.VK_9),
        Hosidius("Hosidius", KeyEvent.VK_A),
        FarmingGuild("Farming Guild", KeyEvent.VK_B),
        House("Your house", KeyEvent.VK_C);

        private final String label;
        private final int key;
    }
}
