package com.neck_flexed.scripts.cerberus;

import com.neck_flexed.scripts.common.Action;
import com.neck_flexed.scripts.common.LoopState;
import com.neck_flexed.scripts.common.util;
import com.runemate.game.api.hybrid.entities.GameObject;
import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.input.direct.MenuAction;
import com.runemate.game.api.hybrid.location.navigation.Traversal;
import com.runemate.game.api.hybrid.region.GameObjects;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.script.framework.core.EventDispatcher;
import com.runemate.game.api.script.framework.listeners.EngineListener;
import lombok.extern.log4j.Log4j2;
import org.jetbrains.annotations.Nullable;

@Log4j2(topic = "WalkUnderState")
public class WalkUnderState implements LoopState<CerbState>, EngineListener {
    private final CerbListener cerbListener;
    private boolean done;
    private int eatCycle = -100;
    private int tick = 0;
    private GameObject portcullis;

    public WalkUnderState(CerbListener cerbListener) {
        this.cerbListener = cerbListener;
    }

    @Override
    public void activate(EventDispatcher d) {
        cerb.updateStatus("Walk under");
        d.addListener(this);
        Action.set(Action.None);
        this.portcullis = getPortcullis();
        if (!Traversal.isRunEnabled())
            Traversal.toggleRun();
    }

    private GameObject getPortcullis() {
        // "Exit" on "Portcullis"
        return GameObjects.newQuery().names("Portcullis").actions("Exit").results().first();
    }

    @Override
    public CerbState deactivate(EventDispatcher d) {
        d.removeListener(this);
        if (cerb.getCerb() == null) return CerbState.POST_LOOT_WAITING;
        return CerbState.FIGHTING;
    }

    @Override
    public CerbState get() {
        return CerbState.WALK_UNDER;
    }

    @Override
    public @Nullable String fatalError() {
        return null;
    }

    @Override
    public boolean done() {
        return cerbListener.isDead() || cerb.getCerb() == null || done;
    }

    @Override
    public void onTickStart() {
        tick++;
        //var food = CerbState.getSettings().food();
        var dog = cerb.getCerb();
        if (dog == null) return;
        var dogArea = dog.getArea();
        if (dogArea == null) return;

        var center = dog.getArea().getCenter();
        var containsMe = dog.getArea().contains(Players.getLocal().getServerPosition());

        if (!containsMe && !Action.get().equals(Action.Move)) {
            util.moveTo(center);
            log.debug(String.format("Walking under move"));
        } else if (containsMe
                && !Action.get().equals(Action.RedClick)
                && !Action.get().equals(Action.Attack)
                && !Action.get().equals(Action.Spec)
        ) {
            log.debug(String.format("Walking under red click"));
            redClick();
        }

        if (dog.getHealthGauge() == null || !dog.getHealthGauge().isValid()) {
            log.debug("health bar gone");
            done = true;
            //    Execution.delay(600, 650);
        }
    }

    private void redClick() {
        // "Exit" on "Portcullis"
        DirectInput.send(MenuAction.forGameObject(this.portcullis, "Exit"));
        Action.set(Action.RedClick);
    }

    @Override
    public void executeLoop() {

    }
}
