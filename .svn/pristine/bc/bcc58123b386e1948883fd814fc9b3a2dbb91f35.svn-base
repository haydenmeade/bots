package com.neck_flexed.scripts.kq;

import com.neck_flexed.scripts.common.LoopState;
import com.neck_flexed.scripts.common.util;
import com.runemate.game.api.hybrid.entities.GameObject;
import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.input.direct.MenuAction;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.region.GameObjects;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.script.Execution;
import com.runemate.game.api.script.framework.core.EventDispatcher;
import lombok.extern.log4j.Log4j2;
import org.jetbrains.annotations.Nullable;

@Log4j2(topic = "EnterLairState")
public class EnterLairState implements LoopState<KqState> {

    private PeekListener peekListener;
    private KqListener kqListener;

    public EnterLairState(KqListener kqListener) {
        this.kqListener = kqListener;
    }

    private static GameObject getRoomEntrance() {
        return GameObjects.newQuery()
                .on(new Coordinate(3509, 9497, 2))
                .ids(23609)
                .actions("Climb-down", "Look-inside")
                .results().first();
    }

    // elite diary
    private static GameObject getCrevice() {
        return GameObjects.newQuery()
                .on(new Coordinate(3501, 9510, 2))
                .ids(16465)
                .actions("Squeeze-through", "Listen")
                .results().first();
    }

    // crack use: tile 3501,9483,2
    private static GameObject getCrack() {
        return GameObjects.newQuery()
                .on(new Coordinate(3501, 9484, 2))
                .ids(29705)
                .actions("Peek")
                .results().first();
    }

    @Override
    public void activate(EventDispatcher d) {
        kq.updateStatus("Entering lair");
        this.peekListener = new PeekListener(d);
        this.kqListener.reset();
    }

    @Override
    public KqState deactivate(EventDispatcher d) {
        this.peekListener.stop();
        if (this.needHop())
            return KqState.HOPPING;
        return KqState.SEARCHING_LAIR;
    }

    @Override
    public KqState get() {
        return KqState.ENTERING_LAIR;
    }

    @Override
    public @Nullable String fatalError() {
        return null;
    }

    @Override
    public boolean done() {
        return needHop() || kq.isInLair();
    }

    private boolean needHop() {
        return this.peekListener.getPlayerCount() > 0
                || (!Players.newQuery().within(kq.lairEntryArea).filter(p -> !Players.getLocal().getName().equals(p.getName())).results().isEmpty());
    }

    @Override
    public void executeLoop() {
        // TODO ROPE?
        if (kq.lairEntryArea.contains(Players.getLocal())) {
            if (getRoomEntrance() != null) {
                log.debug("going down hole");
                DirectInput.send(MenuAction.forGameObject(getRoomEntrance(), "Climb-down"));
                Execution.delayUntil(() -> kq.isInLair() || needHop(), 5000, 5500);
            }
        } else if (kq.canUseCreviceShortcut()) {
            var crevice = getCrevice();
            if (crevice == null) return;
            if (this.peekListener.getPlayerCount() == -1) {
                log.debug("checking crevice");
                DirectInput.send(MenuAction.forGameObject(crevice, "Listen"));
                Execution.delayUntil(() -> this.peekListener.getPlayerCount() != -1, 5000);
            } else {
                log.debug("going through crevice");
                DirectInput.send(MenuAction.forGameObject(crevice, "Squeeze-through"));
                Execution.delayUntil(() -> kq.lairEntryArea.contains(Players.getLocal()), 5000, 6000);
            }
        } else {
            var crack = getCrack();
            if (crack == null) return;
            if (this.peekListener.getPlayerCount() == -1) {
                log.debug("peeking in the crack");
                DirectInput.send(MenuAction.forGameObject(crack, "Peek"));
                Execution.delayUntil(() -> this.peekListener.getPlayerCount() != -1, 5000);
            } else {
                log.debug("going down hole");
                if (getRoomEntrance() != null) {
                    DirectInput.send(MenuAction.forGameObject(getRoomEntrance(), "Climb-down"));
                    Execution.delayUntil(() -> kq.isInLair() || needHop(), 5000, 5500);
                } else {
                    util.moveTo(kq.lairEntryArea.getCenter());
                }
            }
        }
    }
}
