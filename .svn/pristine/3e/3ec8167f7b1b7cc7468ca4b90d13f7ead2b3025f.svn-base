package com.neck_flexed.scripts.mole;

import com.neck_flexed.scripts.common.*;
import com.runemate.game.api.hybrid.entities.GameObject;
import com.runemate.game.api.hybrid.entities.GroundItem;
import com.runemate.game.api.hybrid.entities.Npc;
import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.input.direct.MenuAction;
import com.runemate.game.api.hybrid.local.House;
import com.runemate.game.api.hybrid.local.hud.HintArrow;
import com.runemate.game.api.hybrid.local.hud.interfaces.Health;
import com.runemate.game.api.hybrid.local.hud.interfaces.Inventory;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.location.navigation.Path;
import com.runemate.game.api.hybrid.location.navigation.basic.BresenhamPath;
import com.runemate.game.api.hybrid.queries.GameObjectQueryBuilder;
import com.runemate.game.api.hybrid.queries.GroundItemQueryBuilder;
import com.runemate.game.api.hybrid.queries.HintArrowQueryBuilder;
import com.runemate.game.api.hybrid.queries.NpcQueryBuilder;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.osrs.local.AchievementDiary;
import com.runemate.game.api.osrs.local.SpecialAttack;
import com.runemate.game.api.osrs.local.hud.interfaces.Magic;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import com.runemate.game.api.script.Execution;
import com.runemate.game.api.script.framework.LoopingBot;
import com.runemate.game.api.script.framework.listeners.SettingsListener;
import com.runemate.game.api.script.framework.listeners.events.SettingChangedEvent;
import com.runemate.ui.DefaultUI;
import com.runemate.ui.setting.annotation.open.SettingsProvider;
import javafx.scene.text.Text;
import lombok.extern.log4j.Log4j2;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.EventListener;
import java.util.List;
import java.util.regex.Pattern;

import static com.runemate.game.api.osrs.local.hud.interfaces.Prayer.setQuickPrayers;

@Log4j2(topic = "Mole")
public class Mole extends LoopingBot implements SettingsListener {
    public static final String Mole = "Giant Mole";
    public static final Pattern falShield = Pattern.compile("Falador shield.*");
    public static final int MoleId = 5779;
    public static final int MoleHillId = 12202;
    public static final Area lair = Area.rectangular(new Coordinate(1787, 5246), new Coordinate(1730, 5131));
    public static final Coordinate entryTile = new Coordinate(2996, 3377);
    private static final Area park = Area.rectangular(new Coordinate(2985, 3383), new Coordinate(3015, 3362));
    public static List<String> ignoreLoot = Arrays.asList(
            "Big bones",
            "Steel arrow",

            "Iron arrow",
            "Shark",
            "Mithril bar",
            "Oyster pearls",
            "Uncut ruby",
            "Adamant javelin",
            "Uncut sapphire",
            "Uncut emerald",
            "Nature talisman");
    public static Coordinate centreLair = new Coordinate(1761, 5188);
    @SettingsProvider(updatable = true)
    private MoleSettings settings;
    private MoleListener moleListener;
    private PrayerFlicker prayerFlicker;
    private boolean isDharoks = false;

    public static GameObject getMoleHill() {
        return new GameObjectQueryBuilder().on(entryTile).ids(MoleHillId).results().first();
    }

    public static int lookInsideMoleHill() {
        log.debug("looking inside mole hill");
        var mh = getMoleHill();
        if (mh == null) return 0;
        var l = new MoleHillListener(MoleState.getEventDispatcher());
        mh.interact("Look-inside");
        Execution.delayUntil(() -> l.getPlayerCount() > -1 || MoleState.isPaused(), 5000);
        l.stop();
        return l.getPlayerCount();
    }

    public static boolean isInLair() {
        return lair.contains(Players.getLocal());
    }

    public static @Nullable HintArrow getMoleHint() {
        return new HintArrowQueryBuilder().within(lair).results().first();
    }

    public static @Nullable Npc getMole() {
        return new NpcQueryBuilder().within(lair).ids(MoleId).results().first();

    }

    public static void moveTo(Coordinate c) {
        if (c == null) return;
        log.debug(String.format("MoveTo: %s", c.toString()));
        DirectInput.sendMovement(c);
        Action.set(Action.Move);
    }

    public static void attack() {
        var m = getMole();
        if (m == null) return;
        log.debug("attack");
        DirectInput.send(MenuAction.forNpc(m, "Attack"));
        Action.set(Action.Attack);
    }

    public static Path getPathTo(Coordinate c) {
        return BresenhamPath.buildTo(c);
//        var p = RegionPath.buildTo(centreLair);
//        if (p == null)
//            log.debug("Region path null");
//        return p == null ? BresenhamPath.buildTo(c) : p;

    }

    public static void search() {
        if (!isInLair()) return;
        log.debug("Search");
        if (getMoleHint() == null) {
            log.debug("No hint, going to centre");
            var path = getPathTo(centreLair);
            while (getMoleHint() == null &&
                    getMole() == null &&
                    !MoleState.isPaused() &&
                    Players.getLocal().getPosition() != centreLair) {
                if (path != null) {
                    path.step();
                    Action.set(Action.Move);
                    //Execution.delay(600, 1200);
                } else {
                    log.debug("Could not generate path in Mole.search no arrow");
                }
            }
        }
        var arr = getMoleHint();
        if (arr == null) return;
        while (getMole() == null && !MoleState.isPaused()) {
            var pos = new Coordinate(arr.getPosition().getX(), arr.getPosition().getY());
            log.debug(String.format("Mole at: %s", pos));
            log.debug(String.format("Player at: %s", Players.getLocal().getPosition()));
            var path = getPathTo(pos);
            log.debug("Walking to hint");
            if (path != null) {
                path.step();
                Action.set(Action.Move);
                //Execution.delay(600, 1200);
            } else {
                log.debug("Could not generate path in Mole.search");
            }
        }
    }

    public static void updateStatus(String s) {
        DefaultUI.setStatus(String.format("%s - Mole KC: %d", s, MoleState.getMoleKilled()));
    }

    public static void addListener(EventListener l) {
        if (!MoleState.getEventDispatcher().getListeners().stream().anyMatch(
                e -> e.getClass().getName().equals(l.getClass().getName()))) {
            MoleState.getEventDispatcher().addListener(l);
        }
    }

    public static void removeListener(EventListener l) {
        MoleState.getEventDispatcher().removeListener(l);
    }

    public static boolean restoreHitpoints() {
        if (util.consume(MoleState.getFood(), "Eat")) {
            return true;
        }
        return false;
    }

    public static boolean inFaladorPark() {
        return park.contains(Players.getLocal());
    }

    private static void enterLair() {
        log.debug("entering lair");
        var spade = Inventory.getItems(items.spade).first();
        if (spade == null) {
            log.debug("no spade");
            updateStatus("no spade");
            MoleState.set(MoleState.STOPPING);
            return;
        }
        spade.interact("Dig");
        Execution.delayUntil(() -> isInLair() || MoleState.isPaused(), 5000);
    }

    private static boolean playerInsideLair() {
        return lookInsideMoleHill() > 0;
    }

    private static boolean traverseToFallyPark() {
        if (!isInLair() && !inFaladorPark() && !House.isInside()) {
            if (MoleState.getSettings().RestoreAndBankStrategy() == RestoreAndBankStrategy.House) {
                util.teleToHouse();
                return true;
            } else {
                Magic.FALADOR_TELEPORT.activate();
                if (!Execution.delayUntil(() -> !util.ferox.contains(Players.getLocal()), 5000)) {
                    log.debug("unable to tele to falador");
                    return false;
                }
                while (!MoleState.isPaused() && !inFaladorPark()) {
                    var path = BresenhamPath.buildTo(entryTile);
                    if (path != null) {
                        path.step();
                        Action.set(Action.Move);
                        Execution.delay(600, 1200);
                    } else {
                        log.debug("Could not generate path in traverse to fally park");
                    }
                }
                return inFaladorPark();
            }
        }
        if (House.isInside()) {
            if (!HouseUtil.JbToFallyPark()) {
                MoleState.set(MoleState.STOPPING);
                return true;
            }
            return true;
        }
        return false;
    }

    private @Nullable GroundItem getGroundItemToLoot(Coordinate c) {
        var area = Area.rectangular(c, c).grow(1, 1);
        return new GroundItemQueryBuilder().
                within(area).
                filter(groundItem -> !ignoreLoot.contains(groundItem.getDefinition().getName())).
                results().nearest();
    }

    public void loot(Coordinate c) {
        updateStatus("Looting");
        log.debug("loot");

        if (!Execution.delayUntil(() -> getGroundItemToLoot(c) != null || MoleState.isPaused(),
                10000)) {
            log.debug("no loot? must be someone else's kill?");
            return;
        }
        log.debug("loot start");
        while (getGroundItemToLoot(c) != null && !MoleState.isPaused()) {
            var gi = getGroundItemToLoot(c);
            if (gi == null) {
                log.debug("null gi loot");
                break;
            }
            var p = gi.getPosition();
            var id = gi.getId();
            updateStatus(String.format("Looting: %s", gi));
            //log.debug(String.format("full: %d", Inventory.getUsedSlots()));
            if (Inventory.getUsedSlots() >= 28 && !util.itemStacksAndInInvent((gi))) {
                if (!restoreHitpoints()) {
                    log.debug("full");
                    break;
                } else {
                    Execution.delay(1200, 1800);
                }
            }
            util.take(gi);

            Execution.delayUntil(() -> new GroundItemQueryBuilder().on(p).ids(id).results().isEmpty(), 600, 700);
        }

    }

    public void setActivePrayers(Prayer... activePrayers) {
        this.prayerFlicker.setActivePrayers(activePrayers);
    }

    public void resetKill() {
        Action.set(Action.None);
        setActivePrayers();
        this.moleListener.reset();
    }

    @Override
    public void onResume() {
        super.onResume();
        log.debug(String.format("resumed"));
        var isPaused = MoleState.getSettings() == null;
        MoleState.setPaused(isPaused);
        if (!isPaused) {
            resetKill();
            MoleState.set(MoleState.STARTING);
            addListener(prayerFlicker);
        }
    }

    @Override
    public void onPause() {
        super.onPause();
        MoleState.setPaused(true);
        log.debug(String.format("paused"));
        removeListener(prayerFlicker);
    }

    @Override
    public void onStart(String... arguments) {
        super.onStart(arguments);
        log.debug(String.format("onStart"));
        moleListener = new MoleListener();
        prayerFlicker = new PrayerFlicker();
        MoleState.setBot(this);
        this.getEventDispatcher().addListener(this);
        MoleState.set(MoleState.STARTING);
        MoleState.setPaused(true);
        MoleState.setEventDispatcher(this.getEventDispatcher());

        this.setLoopDelay(10, 25);
        addListener(moleListener);
        addListener(new Consumeables());
        resetKill();
        DefaultUI.addPanel(0, "Instructions", new Text(
                "--BETA--\n" +
                        "Requires: Falador Hard\n" +
                        "HouseBank: Requires house teleport runes, ornate pool, and jewellery box\n" +
                        "FeroxBank: Requires dueling ring, falador teleport runes\n" +
                        "Alching: Requires alch runes\n" +
                        "Should detect and reduce health when using Dharok's and rock cake / locator orb in invent. Will probably kill you if using divine pots (untested).\n"
        ));

    }

    @Override
    public void onSettingChanged(SettingChangedEvent settingChangedEvent) {
        MoleState.setSettings(settings);
        if (!MoleState.isPaused())
            setQuickPrayers(this.getQuickPrayers());
        if (MoleState.getSettings() != null && MoleState.getSettings().equipment() != null)
            isDharoks = util.isDharoks(MoleState.getSettings().equipment());
        updateItemFilter();
    }

    public void updateItemFilter() {
        try {

            var s = MoleState.getSettings();
            if (s == null) return;

            Pattern[] x = util.concatenate(
                    util.toPatternArray(new String[]{items.houseTab, items.dramenStaff, items.lunarStaff,
                            MoleState.getFood()}),
                    new Pattern[]{Pattern.compile("Stamina potion.*"), items.ringOfDueling},
                    util.toItemList(MoleState.getSettings().equipment()),
                    util.toItemList(MoleState.getSettings().specEquipment())
            );
            var supplies = util.joinLists(
                    items.rangedBoosts,
                    items.prayerRestores,
                    items.antiPoisonPP,
                    items.attackBoosts,
                    items.strengthBoosts,
                    items.defenceBoosts,
                    items.combatBoosts
            );
            DefaultUI.setItemEventFilter(MoleState.getBot(),
                    (e -> {
                        var n = e.getItem().getDefinition().getName();
                        var r1 = !Arrays.stream(x).anyMatch(pattern -> pattern.asMatchPredicate().test(n));
                        if (!r1) return false;
                        var id = e.getItem().getId();
                        var r2 = !supplies.stream().anyMatch(i -> i == id);
                        if (!r2) return false;
                        return true;
                    }));
        } catch (Exception e) {
            log.error("Unable to updateItemFilter", e);
        }
    }

    @Override
    public void onSettingsConfirmed() {
        var isPaused = this.isPaused();
        log.debug(String.format("settings confirmed %s, isPaused %s", settings.toString(), isPaused));
        MoleState.setSettings(settings);
        updateItemFilter();
        MoleState.setPaused(isPaused);
        addListener(new AlchListener("Adamant longsword",
                "Mithril platebody",
                "Amulet of strength",
                "Mithril axe",
                "Mithril battleaxe"));
        if (!isPaused) {
            setQuickPrayers(this.getQuickPrayers());
            resetKill();
            MoleState.set(MoleState.STARTING);
            addListener(prayerFlicker);
        }
        if (MoleState.getSettings() != null && MoleState.getSettings().equipment() != null)
            isDharoks = util.isDharoks(MoleState.getSettings().equipment());
        if (!AchievementDiary.FALADOR.isHardComplete()) {
            updateStatus("Requires Falador Hard Diary");
            this.stop("Requires Falador Hard Diary");
        }
    }

    private List<Prayer> getQuickPrayers() {
        if (MoleState.getSettings() == null) return new ArrayList<Prayer>();
        var p = util.getBoostPrayers(MoleState.getSettings().style());
        p.add(Prayer.PROTECT_FROM_MELEE);
        if (isDharoks) {
            p.add(Prayer.RAPID_HEAL);
        }
        return p;
    }

    @Override
    public void onLoop() {
        if (MoleState.isPaused()) return;
        if (MoleState.getSettings() == null) return;
        //log.debug(String.format("loop: %s", MoleState.get()));

        switch (MoleState.get()) {
            case STARTING:
                updateStatus("Starting");
                boolean needsRestock = doWeNeedToRestock();
                if (needsRestock && isInLair()) {
                    MoleState.set(MoleState.RESTORING);
                    break;
                }
                if (needsRestock && !isInLair()) {
                    MoleState.set(MoleState.RESTOCKING);
                    break;
                }
                MoleState.set(MoleState.TRAVERSING);

                break;
            case STOPPING:
                this.stop("stopping");
                break;
            case TRAVERSING:
                updateStatus("Traversing");
                if (traverseToFallyPark()) break;

                if (inFaladorPark() && !Players.getLocal().getPosition().equals(entryTile)) {
                    while (!MoleState.isPaused() &&
                            !Players.getLocal().getPosition().equals(entryTile)) {
                        moveTo(entryTile);
                        Execution.delay(600, 750);
                    }
                    break;
                }

                if (Players.getLocal().getPosition().equals(entryTile)) {
                    if (playerInsideLair()) {
                        // check if players inside.
                        MoleState.set(MoleState.HOPPING);
                    } else {
                        enterLair();
                    }
                    break;
                }
                if (isInLair()) {
                    MoleState.set(MoleState.SEARCHING);
                    break;
                }

                break;
            case FIGHTING:
                updateStatus("Fighting");
                if (this.moleListener.isDead()) {
                    MoleState.set(MoleState.LOOTING);
                    break;
                }
                if (this.moleListener.isDug()) {
                    MoleState.set(MoleState.SEARCHING);
                    Action.set(Action.None);
                    setActivePrayers();
                    Execution.delayUntil(() -> getMole() == null || getMole().getAnimationId() != MoleListener.digAnim, 2000);
                    break;
                }
                if (getMole() == null) {
                    //if (!this.moleListener.isDug() && !this.moleListener.isDead()) {
                    MoleState.set(MoleState.SEARCHING);
                    // }
                    Action.set(Action.None);
                    break;
                }
                if (Action.get() != Action.Attack || Players.getLocal().getTarget() == null) {
                    if (this.prayerFlicker.getActivePrayers().isEmpty()) {
                        util.boostIfNeeded(MoleState.getSettings().style());
                        setActivePrayers(getQuickPrayers().toArray(new Prayer[0]));
                        //util.DirectInputQuickPrayer();
                        if (isDharoks) {
                            util.ReduceHpWithRockCake();
                        }
                    }

                    if (MoleState.getSettings().useSpec() &&
                            SpecialAttack.getEnergy() >= MoleState.getSettings().specEnergy()) {
                        util.equip(MoleState.getSettings().specEquipment());
                        util.activateSpec();
                        attack();
                        Action.set(Action.Spec);
                        Execution.delay(100, 300);
                    } else {
                        util.equip(MoleState.getSettings().equipment());
                        attack();
                        Execution.delay(100, 300);
                    }
                }

                break;
            case SEARCHING:
                updateStatus("Searching");
                setActivePrayers();
                if (isCannonNearby()) {
                    MoleState.set(MoleState.HOPPING);
                    break;
                }
                search();
                log.debug("search done");
                if (getMole() != null) {
                    // TODO
                    boolean myMole = false;
                    if (util.otherPlayersNearby() && !myMole) {
                        MoleState.set(MoleState.HOPPING);
                    } else {
                        MoleState.set(MoleState.FIGHTING);
                        this.moleListener.resetDig();
                    }
                } else {
                    log.debug("search no mole");
                }
                break;
            case LOOTING:
                setActivePrayers();

                loot(this.moleListener.getDeadTile());

                resetKill();
                if (doWeNeedToRestock()) {
                    MoleState.set(MoleState.RESTORING);
                } else {
                    MoleState.set(MoleState.SEARCHING);
                }
                break;
            case RESTORING:
                Restore.execute();
                MoleState.set(MoleState.RESTOCKING);
                break;
            case HOPPING:
                log.error("hopping");
                if (Hopping.hop(MoleState.getSettings().worldRegion())) {
                    MoleState.set(MoleState.STARTING);
                } else {
                    log.error("unable to hop worlds");
                    MoleState.set(MoleState.STOPPING);
                }
                break;
            case RESTOCKING:
                Restock.restock();
                MoleState.set(MoleState.TRAVERSING);
                break;
        }

    }

    private boolean isCannonNearby() {
        return false;
    }


    private boolean doWeNeedToRestock() {
        if (MoleState.getSettings() == null) return false;
        var boost = MoleState.getSettings().boost();
        if (boost != Boost.None && boost != Boost.ImbuedHeart && Inventory.getItems(boost.pattern()).isEmpty()) {
            return true;
        }
        if (MoleState.getSettings().staminaAmount() > 0 && Inventory.getItems(items.staminaPotions).isEmpty()) {
            return true;
        }
        if (Health.getCurrentPercent() < 50 && Inventory.getItems(MoleState.getSettings().food().name).isEmpty()) {
            return true;
        }
        return false;
    }

}
