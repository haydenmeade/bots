package com.neck_flexed.scripts.slayer;

import com.neck_flexed.scripts.common.NeckBot;
import com.neck_flexed.scripts.common.Task;
import com.neck_flexed.scripts.common.loadout.Loadout;
import com.neck_flexed.scripts.common.util;
import com.neck_flexed.scripts.slayer.encounters.EncounterOverride;
import com.runemate.game.api.hybrid.entities.Npc;
import com.runemate.game.api.hybrid.queries.NpcQueryBuilder;
import com.runemate.game.api.hybrid.queries.results.LocatableEntityQueryResults;
import com.runemate.game.api.hybrid.region.Npcs;
import com.runemate.game.api.hybrid.region.Players;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Arrays;
import java.util.Collection;
import java.util.Objects;

public interface SlayerMonster {

    Task getTask();

    String getMonsterName();

    String[] getSuperiorNames();

    Collection<Location> getLocations();


    SlayerFinishItem getFinishItem();

    SlayerProtectionItem getProtection();

    boolean needsLightSource();

    boolean isLeafBladed();

    default boolean supportsSpec(SlayerBotImpl<?> bot) {
        var l = this.getLoadout(bot);
        var melee = bot.loadouts.getForName(SlayerLoadout.MELEE_LOADOUT);
        return melee.equals(l);
    }

    boolean isDragon();

    boolean isWyvern();

    boolean isPoisonous();

    boolean isHoppingDisabled();

    BoneType getBoneType();

    int getFood(NeckBot<?, ?> bot);

    default boolean isMonster(Npc npc) {
        if (npc == null) return false;
        var name = npc.getName();
        if (name == null) return false;
        var names = util.toPatternArray(getAllNames());
        return Arrays.stream(names).anyMatch(a -> a.matcher(name).find());
    }

    default String[] getAllNames() {
        return util.concatenate(getAlternatives(), new String[]{getMonsterName()}, getSuperiorNames());
    }

    default NpcQueryBuilder getNpcsQuery(SlayerBotImpl<?> bot) {
        var names = util.toPatternArray(getAllNames());
        return Npcs.newQuery()
                .names(names)
                .within(getLocation(bot).getArea())
                .filter(n -> (n.getTarget() == null || Objects.equals(n.getTarget(), Players.getLocal()))
                        && (n.getHealthGauge() == null || n.getHealthGauge().getPercent() > 0));
    }

    default LocatableEntityQueryResults<Npc> getNpcsWithin(SlayerBotImpl<?> bot) {
        return getNpcsQuery(bot)
                .actions("Attack")
                .results();
    }

    boolean needsFood(NeckBot<?, ?> bot);

    default @Nullable LocatableEntityQueryResults<Npc> getSuperior(SlayerBotImpl<?> bot) {
        if (getSuperiorNames().length == 0) return null;
        var names = util.toPatternArray(getSuperiorNames());
        return Npcs.newQuery()
                .names(names)
                .within(getLocation(bot).getArea())
                .filter(n -> !bot.getSuperiorBlacklist().contains(n) &&
                        (n.getTarget() == null || Objects.equals(n.getTarget(), Players.getLocal()))
                        && (n.getHealthGauge() == null || n.getHealthGauge().getPercent() > 0))
                .actions("Attack")
                .results();
    }

    default boolean isSuperiorPresent(SlayerBotImpl<?> bot) {
        var s = getSuperior(bot);
        return s != null && s.size() > 0;
    }


    String[] getAlternatives();


    default Loadout getLoadout(SlayerBotImpl<?> bot) {
        var loadouts = bot.loadouts;
        Loadout l = null;
        if (this.getLocation(bot).isBarrage() && bot.barrageTasksAvailable()) {
            l = loadouts.getForName(SlayerLoadout.BARRAGE_LOADOUT);
        } else if (isLeafBladed()) {
            l = loadouts.getForName(SlayerLoadout.LEAF_LOADOUT);
        } else if (isTuraelMonster()) {
            l = loadouts.getForName(SlayerLoadout.TURAEL_LOADOUT);
        } else if (isDragon()) {
            l = loadouts.getForName(SlayerLoadout.DRAGON_LOADOUT);
        } else if (isWyvern()) {
            l = loadouts.getForName(SlayerLoadout.WYVERN_LOADOUT);
        } else if (getTask().equals(Task.WYRMS) || getTask().equals(Task.DRAKES)) {
            l = loadouts.getForName(SlayerLoadout.DRAKE_WYRM_LOADOUT);
        } else if (getTask().equals(Task.LIZARDMEN)) {
            l = loadouts.getForName(SlayerLoadout.SHAMAN_LOADOUT);
        }
        return l == null ? loadouts.getForName(SlayerLoadout.MELEE_LOADOUT) : l;
    }

    boolean isTuraelMonster();

    default EncounterOverride getSuperiorEncounter() {
        return null;
    }

    default @NotNull Location getLocation(SlayerBotImpl<?> bot) {
        var locations = getLocations();
        if (locations.size() == 1 || bot == null) {
            return locations.iterator().next();
        }
        return bot.selectLocation(this);
    }

    default @NotNull Location getLocation(NeckBot<?, ?> bot) {
        return getLocation((SlayerBotImpl<?>) bot);
    }
}
