package com.neck_flexed.scripts.slayer.state;

import com.neck_flexed.scripts.common.*;
import com.neck_flexed.scripts.common.loadout.Loadout;
import com.neck_flexed.scripts.common.loadout.Loadouts;
import com.neck_flexed.scripts.common.loot.LootSettings;
import com.neck_flexed.scripts.common.state.BaseState;
import com.neck_flexed.scripts.slayer.Location;
import com.neck_flexed.scripts.slayer.SlayerBotImpl;
import com.neck_flexed.scripts.slayer.SlayerMonster;
import com.runemate.game.api.hybrid.RuneScape;
import com.runemate.game.api.hybrid.entities.Npc;
import com.runemate.game.api.hybrid.entities.Player;
import com.runemate.game.api.hybrid.entities.Projectile;
import com.runemate.game.api.hybrid.input.direct.MenuAction;
import com.runemate.game.api.hybrid.local.hud.interfaces.Chatbox;
import com.runemate.game.api.hybrid.local.hud.interfaces.Health;
import com.runemate.game.api.hybrid.local.hud.interfaces.Inventory;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.location.navigation.Traversal;
import com.runemate.game.api.hybrid.queries.results.LocatableEntityQueryResults;
import com.runemate.game.api.hybrid.region.Npcs;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.osrs.local.SpecialAttack;
import com.runemate.game.api.script.Execution;
import com.runemate.game.api.script.framework.listeners.ChatboxListener;
import com.runemate.game.api.script.framework.listeners.NpcListener;
import com.runemate.game.api.script.framework.listeners.ProjectileListener;
import com.runemate.game.api.script.framework.listeners.events.DeathEvent;
import com.runemate.game.api.script.framework.listeners.events.HitsplatEvent;
import com.runemate.game.api.script.framework.listeners.events.MessageEvent;
import com.runemate.game.api.script.framework.listeners.events.ProjectileLaunchEvent;
import lombok.extern.log4j.Log4j2;
import org.jetbrains.annotations.Nullable;

import java.util.*;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Log4j2
public class FightState extends BaseState<SlayerState> implements NpcListener, ProjectileListener, ChatboxListener {
    final static String ALREADY_IN_COMBAT = "I'm already under attack.";
    final static String SOMEONE_ELSE_FIGHTING = "Someone else is fighting that.";
    private final SlayerBotImpl<?> bot;
    private final SlayerMonster monster;
    private final Loadouts loadouts;
    private final int reboost;
    private final Loadout loadout;
    private final PrayerFlicker prayerFlicker;
    private final LootSettings lootSettings;
    private final boolean useAntifire;
    private final Loadout specLoadout;
    private final Cannon cannon;
    private final Location location;
    private final Pattern[] ignorePlayers;
    private boolean done = false;
    private Npc currentTarget;
    private long lastCheck = 0L;
    private Coordinate bestMoveTo = null;
    private Projectile dodgeProjectile = null;
    private boolean started = false;

    public FightState(SlayerBotImpl<?> bot, SlayerMonster monster, int reboost, Loadout loadout, @Nullable LootSettings lootSettings, boolean useAntifire, Pattern[] ignorePlayers) {
        super(bot, SlayerState.FIGHTING);
        this.bot = bot;
        this.monster = monster;
        this.loadouts = bot.loadouts;
        this.reboost = reboost;
        this.loadout = loadout;
        this.ignorePlayers = ignorePlayers;
        this.specLoadout = monster.supportsSpec(bot) ? loadouts.getSpecLoadout() : null;
        this.prayerFlicker = bot.prayerFlicker;
        this.location = monster.getLocation(bot);
        this.cannon = location.getCannonSpot() != null && (Cannon.hasCannon() || bot.getCannon().isCannonPlaced()) ? bot.getCannon() : null;
        this.lootSettings = lootSettings;
        this.useAntifire = useAntifire;
    }

    public static @Nullable Npc setSuperiorTarget(@Nullable LocatableEntityQueryResults<Npc> superiors) {
        if (superiors == null || superiors.isEmpty()) return null;
        var notInCombat = superiors.stream().filter(n -> n.getTarget() == null).findFirst();
        return notInCombat.orElseGet(superiors::nearest);
    }

    @Override
    public void onMessageReceived(MessageEvent event) {
        if (!event.getType().equals(Chatbox.Message.Type.SERVER)) return;
        if (ALREADY_IN_COMBAT.equals(event.getMessage())) {
            log.debug("Cleared target due to message {}", ALREADY_IN_COMBAT);
            this.currentTarget = null;
        } else if (SOMEONE_ELSE_FIGHTING.equals(event.getMessage())) {
            log.debug("Cleared target due to message {}", SOMEONE_ELSE_FIGHTING);
            this.currentTarget = null;
        }
    }

    @Override
    public EventListener[] getEventListeners() {
        var l = new ArrayList<EventListener>();
        l.add(this);
        if (monster.getSuperiorEncounter() != null) {
            l.add(monster.getSuperiorEncounter());
        }
        return l.toArray(new EventListener[0]);
    }

    @Override
    public void activate() {
        bot.updateStatus(String.format("Fighting %s (%s)", monster, SlayerTask.getCount()));
        this.bot.setLoadoutOverriders();
        loadouts.equip(loadout);
        prayerFlicker.setQuickPrayers(util.joinPrayers(loadout.getBoostPrayers(), location.getPrayer()));
        bot.setPreviousTask(monster);
        if (!util.isAutoRetaliateEnabled())
            util.toggleAutoRetaliate();
        if (cannon != null && !cannon.isCannonPlaced())
            cannon.refresh();
    }

    @Override
    public void deactivate() {
        super.deactivate();
        if (!SlayerTask.hasTask() && bot.getCannon() != null && bot.getCannon().isCannonPlaced()) {
            for (int attempts = 0; attempts < 5; attempts++) {
                if (Inventory.getEmptySlots() < 4) {
                    Food.dropWorst();
                }
                bot.getCannon().pickup();
                if (!bot.getCannon().isCannonPlaced()) break;
                Execution.delay(600, 700);
            }
        }
    }

    @Override
    public @Nullable String fatalError() {
        if (monster == null)
            return "Unable to find slayer monster from task: " + SlayerTask.getCurrent();
        return null;
    }

    @Override
    public boolean done() {
        return this.done;
    }

    @Override
    public void onNpcDeath(DeathEvent event) {
        var npc = (Npc) event.getSource();
        bot.handleNpcDeath(monster, npc, currentTarget);
    }

    @Override
    public void onNpcHitsplat(HitsplatEvent event) {
        if (Objects.equals(event.getSource(), currentTarget)) {
            started = true;
        }
    }

    @Override
    public void executeLoop() {
        if (!SlayerTask.hasTask() && !monster.isSuperiorPresent(bot)) {
            this.done = true;
        }
        if (this.done) return;
        var p = Players.getLocal();
        if (p == null) return;
        var pos = p.getServerPosition();
        if (pos == null) return;
        if (this.monster.getFood(bot) == 0) {
            var f = Food.getAny();
            if (f != null && f.getHeals() < (Health.getMaximum() - Health.getCurrent())) {
                var hp = Health.getCurrent();
                f.eat();
                Execution.delayUntil(() -> Health.getCurrent() > hp, 600, 700);
                return;
            }
        }

        // after hopping
        if (Objects.equals(bot.getPreviousState(), SlayerState.HOPPING) && currentTarget != null && !started) {
            currentTarget.interact("Attack");
            if (!currentTarget.isValid()) {
                currentTarget = null;
            }
            Execution.delayUntil(() -> started, util::playerAnimatingOrMoving, 1200, 2400);
            return;
        }

        if (monster.getTask().equals(Task.LIZARDMEN)) {
            if (bot.getShamanEncounter().executeLoop(currentTarget)) {
                log.debug("Lizard encounter override {}", currentTarget);
                return;
            }
        }

        checkAntifire();

        if (bestMoveTo != null) {
            if (pos.equals(bestMoveTo) || isProjectileDone(dodgeProjectile)) {
                bestMoveTo = null;
            }
            return;
        }

        checkLoot();

        if (this.cannon != null) {
            if (doCannonLogic(pos)) return;
        } else if (currentTarget == null && started && p.getHealthGauge() == null && util.anyOtherPlayersWithin(location.getArea(), ignorePlayers)) {
            // been crashed
            bot.updateStatus("Got crashed, trying to hop...");
            bot.forceState(SlayerState.HOPPING);
        }

        if (currentTarget != null && !location.getArea().contains(currentTarget)) {
            currentTarget = null;
        }

        var superiors = monster.getSuperior(bot);
        if (superiors == null || superiors.isEmpty()) {
            checkSinglesForTargetChange(p, pos);
        } else {
            currentTarget = setSuperiorTarget(superiors);
            if (monster.getSuperiorEncounter() != null) {
                log.debug("Superior encounter {}", monster);
                if (monster.getSuperiorEncounter().executeLoop(currentTarget))
                    return;
            }
        }

        if (useFinishItem()) return;

        if (this.currentTarget == null || !this.currentTarget.isValid() ||
                (currentTarget.getHealthGauge() != null && currentTarget.getHealthGauge().getPercent() == 0)) {
            this.currentTarget = monster.getNpcsWithin(bot).nearest();
            if (currentTarget == null && (monster.getTask().equals(Task.CAVE_KRAKEN) || monster.getTask().equals(Task.MUTATED_ZYGOMITES))) {
                wakeUpMonster();
                return;
            }

            if (this.currentTarget == null && location.getCannonSpot() != null && !pos.equals(location.getCannonSpot())) {
                util.moveTo(location.getCannonSpot());
                Execution.delayUntil(() -> !monster.getNpcsWithin(bot).isEmpty() || pos.equals(location.getCannonSpot()), util::playerMoving, 1000, 2000);
            }
        }

        util.boostIfNeeded(loadout.getStyle(), reboost);
        if (shouldSpec()) {
            if (!SpecialAttack.isActivated()) {
                loadouts.equip(specLoadout);
                Execution.delay(200, 250);
                util.activateSpec();
                if (!Objects.equals(currentTarget, p.getTarget()))
                    util.attack(currentTarget);
                Execution.delay(600, 650);
                return;
            }
        } else {
            loadouts.equip(loadout);
        }

        var target = p.getTarget();
        if (!Objects.equals(target, currentTarget)) {
            util.attack(currentTarget);
        }

        if (Traversal.getRunEnergy() < 45 && !Traversal.isStaminaEnhanced() && SlayerTask.getCount() > 10) {
            Traversal.drinkStaminaEnhancer();
        }
        if (!Traversal.isRunEnabled() && Traversal.getRunEnergy() > 10)
            Traversal.toggleRun();

        Execution.delay(600, 800);
    }

    private void wakeUpMonster() {
        var t = monster.getTask();
        switch (t) {
            case CAVE_KRAKEN:

                break;
            case MUTATED_ZYGOMITES:
                var fungi = Npcs.newQuery()
                        .names("Fungi")
                        .actions("Pick")
                        .results().nearest();
                if (fungi != null && fungi.isValid()) {
                    log.debug("Picking fungi {}", fungi);
                    di.send(MenuAction.forNpc(fungi, "Pick"));
                    Execution.delayUntil(() -> monster.getNpcsWithin(bot).size() > 0, util::playerAnimatingOrMoving, 1200, 2400);
                }
                break;
        }
    }

    private boolean isProjectileDone(Projectile p) {
        if (p == null) return true;
        return p.getImpactCycle() < RuneScape.getCurrentCycle();
    }

    private void checkAntifire() {
        if (!monster.isDragon() || !useAntifire) return;

        if (!Antifire.consumeIfRequired() && !Antifire.hasAny()) {
            log.error("Unable to consume antifire and have none left");
            bot.forceState(SlayerState.RESTORING);
        }
    }

    private boolean shouldSpec() {
        var r1 = currentTarget != null
                && specLoadout != null
                && SpecialAttack.getEnergy() >= specLoadout.getSpecEnergy();
        if (!r1) return false;
        var hp = currentTarget.getHealthGauge();
        if (hp != null) return hp.getPercent() > 50;
        return true;
    }

    private boolean useFinishItem() {
        if (monster.getFinishItem() != null && currentTarget != null && currentTarget.getHealthGauge() != null
                && currentTarget.getHealthGauge().getPercent() < 0.1) {// TODO test more
            var finishItem = monster.getFinishItem();
            var item = Inventory.getItems(finishItem.getUseItem()).first();
            if (item == null) {
                log.debug("no finish item");
                bot.forceState(SlayerState.RESTORING);
                return true;
            }
            if (finishItem.needsReload()) {
                log.debug("reload finish item");
                var i2 = Inventory.getItems(finishItem.getReloadItem()).first();
                if (item == null || i2 == null) {
                    log.debug("no reload item");
                    bot.forceState(SlayerState.RESTORING);
                    return true;
                }
                di.sendItemUseOn(i2, item);
                Execution.delayWhile(finishItem::needsReload, 1000, 2000);
                return true;
            }
            di.sendItemUseOn(item, currentTarget);
            Execution.delayUntil(util::playerAnimating, util::playerMoving, 600, 1200);
            Execution.delay(400, 700);
            currentTarget = null;
            return true;
        }
        return false;
    }

    private void checkLoot() {
        if (lootSettings != null && System.currentTimeMillis() - lastCheck > 2400) {
            this.lastCheck = System.currentTimeMillis();
            if (LootState.anyAvailableLoot(bot, lootSettings)) {
                log.debug("Loot available");
                this.done = true;
            }
        }
    }

    private void checkSinglesForTargetChange(Player p, Coordinate pos) {
        if (currentTarget != null && Objects.equals(currentTarget.getTarget(), p)) return;
        if (currentTarget != null && currentTarget.getTarget() != null) {
            currentTarget = null;
        }

        var attackingMeOther = Npcs.newQuery()
                .within(location.getArea())
                .actions("Attack")
                .filter(n -> Objects.equals(p, n.getTarget())
                        && Arrays.stream(monster.getAllNames()).noneMatch(s -> s.equalsIgnoreCase(n.getName()))
                        && n.distanceTo(pos) < 5)
                .results().nearest();
        var attackingMe = Npcs.newQuery()
                .within(location.getArea())
                .actions("Attack")
                .filter(n -> Objects.equals(p, n.getTarget()))
                .results().nearest();
        if (attackingMeOther != null) {
            currentTarget = attackingMeOther;
        } else if (attackingMe != null && !attackingMe.equals(currentTarget)) {
            currentTarget = attackingMe;
        }
    }

    private boolean doCannonLogic(Coordinate pos) {
        if (!cannon.isCannonPlaced()) {
            if (util.anyOtherPlayersWithin(location.getArea(), ignorePlayers) && !monster.isHoppingDisabled()) {
                bot.updateStatus("Hopping when moving / setting up cannon.");
                bot.forceState(SlayerState.HOPPING);
                return true;
            }
            if (pos.equals(location.getCannonSpot())) {
                cannon.place();
                Execution.delayUntil(
                        cannon::isCannonPlaced,
                        util::playerAnimatingOrMoving,
                        2000, 2500);
            } else {
                util.moveTo(location.getCannonSpot());
                Execution.delayUntil(
                        () -> Players.getLocal().getServerPosition().equals(location.getCannonSpot()),
                        util::playerMoving,
                        1000, 2000);
            }
            return true;
        }
        if (!cannon.isStarted()) {
            cannon.startUp();
            return true;
        }
        if (cannon.needsReload()) {
            cannon.reload();
            return true;
        }
        if (cannon.isReloading()) {
            return true;
        }
        return false;
    }

    @Override
    public void onProjectileLaunched(ProjectileLaunchEvent event) {
        var projectile = event.getProjectile();
        if (projectile == null) return;
        if (Objects.equals(monster.getTask(), Task.DARK_BEASTS)) {
            this.dumpInfo(monster, event);
        }
        var projectileInfo = AoeProjectileInfo.getById(projectile.getSpotAnimationId());
        if (projectileInfo == null) return;
        var p = Players.getLocal();
        log.debug("We seen an Aoe Projectile: {} -- {} -- I'm on: {}", projectileInfo, projectile, p.getServerPosition());
        var launchPos = projectile.getLaunchPosition();
        var targetMe = Objects.equals(Players.getLocal(), projectile.getTarget());
        if (targetMe) {
            log.debug("Target was me");
        }
        var launchNear = launchPos.distanceTo(p.getServerPosition()) <= 5;
        if (launchNear) {
            log.debug("Launch was near me");
        }
        if (!targetMe && !launchNear) {
            log.debug("Not mine");
            return;
        }

        this.dodgeProjectile = projectile;
        var coordinates = (currentTarget != null)
                ? util.getMeleeCoordinates(currentTarget)
                : location.getArea().getCoordinates();

        var danger = p.getServerPosition().getArea().grow(projectileInfo.getAoeSize(), projectileInfo.getAoeSize());

        var bestMoveTo =
                getOptimalMoveTo(coordinates.stream()
                        .filter(c -> !danger.contains(c) && c.isReachable())
                        .collect(Collectors.toList()));
        if (bestMoveTo != null) {
            util.moveTo(bestMoveTo);
            this.bestMoveTo = bestMoveTo;
        }
    }

    private void dumpInfo(SlayerMonster monster, ProjectileLaunchEvent event) {
        var projectile = event.getProjectile();
        if (projectile == null) return;
        if (currentTarget == null) return;
        log.debug("Projectile dump {} projectile {} target {} launch pos {}, anim {}, currentTarget {}, my position: {}",
                monster,
                projectile,
                projectile.getTarget(),
                projectile.getLaunchPosition(),
                projectile.getAnimationId(),
                currentTarget,
                Players.getLocal().getServerPosition());
    }

    private Coordinate getOptimalMoveTo(Collection<Coordinate> options) {
        var results = new CoordinateQueryResults(options);
        return results.nearest();
    }
}
