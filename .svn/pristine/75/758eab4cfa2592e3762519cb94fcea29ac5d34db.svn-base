package com.neck_flexed.scripts.common.traverse;

import com.neck_flexed.scripts.common.HouseConfig;
import com.neck_flexed.scripts.common.PortalNexusTeleport;
import com.neck_flexed.scripts.common.items;
import com.neck_flexed.scripts.common.util;
import com.runemate.game.api.hybrid.entities.GameObject;
import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.input.direct.MenuAction;
import com.runemate.game.api.hybrid.local.House;
import com.runemate.game.api.hybrid.local.hud.interfaces.Equipment;
import com.runemate.game.api.hybrid.local.hud.interfaces.Inventory;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.location.navigation.Path;
import com.runemate.game.api.hybrid.location.navigation.cognizant.WaypointPath;
import com.runemate.game.api.hybrid.region.GameObjects;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.osrs.local.AchievementDiary;
import com.runemate.game.api.script.Execution;
import lombok.extern.log4j.Log4j2;

import java.util.concurrent.Callable;
import java.util.regex.Pattern;

@Log4j2
public class FairyRingTraverse implements TraverseMethod {
    public static final Area ardyCloakTele = Area.rectangular(new Coordinate(2594, 3246, 0), new Coordinate(2664, 3204, 0));
    private final FairyRing fairyRing;
    private Path path;
    private HousePortalTraverse currentTraverse;

    public FairyRingTraverse(FairyRing fairyRing) {
        this.fairyRing = fairyRing;
    }

    public static GameObject getFairyRing() {
        var p = Players.getLocal().getServerPosition();
        if (ardyCloakTele.contains(p))
            return GameObjects
                    .newQuery()
                    .on(new Coordinate(2658, 3230, 0))
                    .types(GameObject.Type.PRIMARY)
                    .names("Fairy ring")
                    .results().nearest();

        var f1 = com.runemate.game.api.hybrid.local.hud.interfaces.FairyRing.getNearestObject();
        if (f1 != null) return f1;
        var fr = GameObjects.newQuery().types(
                GameObject.Type.PRIMARY).names("Fairy ring").results().nearest();
        if (fr != null) return fr;
        var f2 = GameObjects.newQuery().types(
                GameObject.Type.PRIMARY).names("Spiritual Fairy Tree").results().nearest();
        if (f2 != null) return f2;
        var f3 = GameObjects.newQuery().types(
                GameObject.Type.PRIMARY).actions(Pattern.compile(".*Zanaris.*")).results().nearest();
        if (f3 != null) return f3;
        return null;
    }

    public static boolean ardyCloakTele() {
        var cl = Inventory.contains(items.argdougneCloak)
                ? Inventory.getItems(items.argdougneCloak).first()
                : Equipment.getItems(items.argdougneCloak).first();
        if (cl == null) {
            log.error("no ardy cloak");
            return false;
        }
        if (cl.interact("Monastery Teleport"))
            return Execution.delayUntil(() -> ardyCloakTele.contains(Players.getLocal()), util::playerAnimating, 2000, 3000);
        return false;
    }

    @Override
    public boolean hasSupport(HouseConfig houseConfig) {
        return true;
    }

    @Override
    public boolean doTraverseLoop(HouseConfig houseConfig, Coordinate startPosition) {
        var fr = getFairyRing();
        if (fr != null) {
            return fairyRingTo(fr, fairyRing, startPosition);
        }
        if (Inventory.contains(items.questCape) || Equipment.contains(items.questCape)) {
            util.questCapeTele();
        } else if (houseConfig.isHasFairyRing()) {
            util.teleToHouse();
        } else if (houseConfig.hasPortal(PortalNexusTeleport.SalveGraveyard)) {
            if (!House.isInside()) {
                util.teleToHouse();
            } else if (this.currentTraverse == null) {
                this.currentTraverse = new HousePortalTraverse(PortalNexusTeleport.SalveGraveyard);
            } else {
                this.currentTraverse.doTraverseLoop(houseConfig, startPosition);
            }
        } else if (Inventory.contains(items.argdougneCloak) || Equipment.contains(items.argdougneCloak)) {
            var pos = Players.getLocal().getServerPosition();
            if (ardyCloakTele.contains(pos)) {
                if (this.path == null) {
                    this.path = WaypointPath.create(new Coordinate[]{
                            pos,
                            new Coordinate(2613, 3223, 0),
                            new Coordinate(2632, 3225, 0),
                            new Coordinate(2649, 3232, 0),
                            new Coordinate(2655, 3231, 0)
                    });
                }

                if (this.path != null) {
                    if (!this.path.step())
                        this.path = null;
                } else {
                    log.error("Could not generate path from {} to ardy ring", pos);
                }

            } else {
                ardyCloakTele();
            }
        }
        return false;
    }

    private boolean fairyRingTo(GameObject fairyRing, FairyRing destination, Coordinate startPosition) {
        if (Players.getLocal() == null) return false;
        if (fairyRing == null) {
            log.debug("null fairy ring");
            return false;
        }
        if (!AchievementDiary.LUMBRIDGE.isEliteComplete()) {
            if (Equipment.getItems(items.dramenStaff).isEmpty()) {
                util.equipDramen();
                return false;
            }
        }
        var cp = Players.getLocal().getServerPosition().getContainingRegionId();
        Callable<Boolean> check = () -> cp != Players.getLocal().getServerPosition().getContainingRegionId();

        if (destination.isPreviousDestination()) {
            log.debug("fairy ring to last destination");
            var patternLastDest = Pattern.compile(".*ast-destination \\(" + destination.name() + "\\)");
            DirectInput.send(MenuAction.forGameObject(fairyRing, patternLastDest));
            return Execution.delayUntil(check,
                    util::playerAnimatingOrMoving,
                    3500, 4500);
        } else if (FairyRing.isConfigurationOpen()) {
            if (!destination.select()) {
                Execution.delay(1000, 2400);
                return false;
            }
            return Execution.delayUntil(check,
                    util::playerAnimatingOrMoving,
                    3500, 4500);
        } else {
            log.debug("fairy ring configure");
            if (fairyRing.getActiveDefinition().getActions().contains("Configure"))
                DirectInput.send(MenuAction.forGameObject(fairyRing, "Configure"));
            else
                DirectInput.send(MenuAction.forGameObject(fairyRing, "Ring-configure"));
            Execution.delayUntil(FairyRing::isConfigurationOpen, 2000, 3000);
        }
        return false;
    }
}
