package com.neck_flexed.scripts.cerberus;

import com.neck_flexed.scripts.common.*;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.hybrid.region.SpotAnimations;
import com.runemate.game.api.osrs.local.SpecialAttack;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import com.runemate.game.api.script.framework.core.EventDispatcher;
import com.runemate.game.api.script.framework.listeners.EngineListener;
import lombok.extern.log4j.Log4j2;

@Log4j2(topic = "FightState2")
public class FightState2 implements LoopState<CerbState>, EngineListener {
    private final CerbListener cerbListener;
    private final PrayerFlicker prayerFlicker;
    private final cerb bot;
    private final Prayer[] boostPrayers;
    private final CombatStyle combatStyle;
    private boolean done = false;
    private int tick = 0;
    private int comboTick = 0;

    public FightState2(CerbListener cerbListener,
                       PrayerFlicker prayerFlicker,
                       cerb bot,
                       Prayer[] boostPrayers,
                       CombatStyle combatStyle) {
        this.cerbListener = cerbListener;
        this.prayerFlicker = prayerFlicker;
        this.bot = bot;
        this.boostPrayers = boostPrayers;
        this.combatStyle = combatStyle;
    }


    @Override
    public void onTickStart() {
        tick++;

        var s = CerbState.getSettings();
        var target = Players.getLocal().getTarget();
        var dog = cerb.getCerb();
//        if (dog == null && !Players.getLocal().isMoving()) {
//            log.debug("move to center");
//            util.boostIfNeeded(this.combatStyle);
//            util.moveTo(cerb.centerSpawnTile);
//            return;
//        }
//        if (dog == null) return;
//        if (dog.getId() == cerb.IdStartNoAttack && !Action.get().equals(Action.Move)) {
//            log.debug("initiate");
//            util.moveTo(dog.getArea().getCenter());
//            util.boostIfNeeded(this.combatStyle);
//            return;
//        }
        switch (this.cerbListener.getCurrentPhase()) {
            case Auto:
                log.debug("auto");
                comboTick = 0;
                this.prayerFlicker.setActivePrayers(util.joinPrayers(this.boostPrayers, Prayer.PROTECT_FROM_MAGIC));
                break;
            case Combo:
                log.debug("combo");
                log.debug(String.format("combo tick %s", comboTick));

                break;
            case Ghost:
                log.debug("ghost");
                this.bot.forceState(CerbState.GHOSTS);
                return;
            case Lava:
                log.debug("lava");
                log.debug(SpotAnimations.getLoaded());
                break;
        }
        if (true) return;

        switch (this.cerbListener.getNextPhase()) {
            case Auto:
                break;
            case Combo:
                break;
            case Ghost:
                break;
            case Lava:
                break;
        }

        if (s.specEquipment() != null &&
                !s.specEquipment().isEmpty() &&
                SpecialAttack.getEnergy() >= 50
        ) {
            util.activateSpec();
            if (target == null || !Action.get().equals(Action.Spec)) {
                util.equip(CerbState.getSettings().specEquipment());
                cerb.attack();
                Action.set(Action.Spec);
            }
        } else if (target == null
                || Action.get() != Action.Attack) {
            util.equip(CerbState.getSettings().equipment());
            cerb.attack();
        }
    }

    @Override
    public CerbState deactivate(EventDispatcher d) {
        log.debug("deactivate");
        if (this.cerbListener.isDead()) {
            Action.set(Action.None);
            this.prayerFlicker.setActivePrayers();
            return CerbState.LOOTING;
        } else if (this.done)
            return CerbState.WALK_UNDER;
        return CerbState.STARTING;
    }

    @Override
    public void activate(EventDispatcher d) {
        Action.set(Action.None);
        log.debug("activate");
        cerb.updateStatus("Fighting");
        //this.prayerFlicker.setActivePrayers(this.boostPrayers);
        this.prayerFlicker.setActivePrayers(util.joinPrayers(this.boostPrayers, Prayer.PROTECT_FROM_MAGIC));
    }

    @Override
    public CerbState get() {
        return CerbState.FIGHTING;
    }

    @Override
    public String fatalError() {
        return null;
    }

    @Override
    public boolean done() {
        return this.cerbListener.isDead() || done;
    }

    @Override
    public void executeLoop() {


    }
}
