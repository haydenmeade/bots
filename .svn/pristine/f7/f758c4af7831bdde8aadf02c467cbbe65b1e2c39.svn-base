package com.neck_flexed.scripts.sarachnis;

import com.neck_flexed.scripts.common.CombatStyle;
import com.neck_flexed.scripts.common.Food;
import com.neck_flexed.scripts.common.PrayerFlicker;
import com.neck_flexed.scripts.common.loadout.Loadouts;
import com.neck_flexed.scripts.common.state.BaseState;
import com.neck_flexed.scripts.common.util;
import com.runemate.game.api.hybrid.entities.Actor;
import com.runemate.game.api.hybrid.entities.Npc;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.osrs.local.SpecialAttack;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import com.runemate.game.api.script.framework.listeners.EngineListener;
import lombok.extern.log4j.Log4j2;

import java.util.EventListener;

@Log4j2(topic = "FightState")
public class FightState extends BaseState<SarachnisState> implements EngineListener {
    private final bot bot;
    private final SarachnisListener sarachnisListener;
    private final PrayerFlicker prayerFlicker;
    private final Loadouts loadouts;
    private final Sarachnis sarachnis;
    private final Prayer[] boostPrayers;

    public FightState(bot bot,
                      SarachnisListener sarachnisListener,
                      PrayerFlicker prayerFlicker
    ) {
        super(SarachnisState.FIGHTING);
        this.bot = bot;
        this.loadouts = bot.loadouts;
        this.sarachnisListener = sarachnisListener;
        if (this.sarachnisListener.getSarachnis() == null) {
            this.sarachnisListener.init();
        }
        this.sarachnis = this.sarachnisListener.getSarachnis();
        this.prayerFlicker = prayerFlicker;
        this.boostPrayers = this.loadouts.getAnyCombat().getBoostPrayers();
    }

    @Override
    public EventListener[] getEventListeners() {
        return new EventListener[]{this};
    }

    @Override
    public void deactivate() {
        log.debug("deactivate");
        this.sarachnisListener.handleEndFight();
        this.prayerFlicker.setActivePrayers();
    }

    @Override
    public void activate() {
        bot.updateStatus("Fighting");
        handlePrayer();
    }

    @Override
    public String fatalError() {
        return null;
    }

    @Override
    public boolean done() {
        return this.sarachnisListener.isDead() || this.sarachnis == null;
    }

    private void handlePrayer() {
        if (this.sarachnis == null) return;
        var prot = this.sarachnis.getNextExpectedAttack().equals(CombatStyle.Ranged)
                ? Prayer.PROTECT_FROM_MISSILES
                : Prayer.PROTECT_FROM_MELEE;

        this.prayerFlicker.setActivePrayers(util.joinPrayers(this.boostPrayers, prot));
    }

    @Override
    public void onTickStart() {
        try {
            var p = Players.getLocal();
            if (p == null) return;
            var pos = p.getServerPosition();
            if (pos == null) return;
            util.boostIfNeeded(loadouts.getEquipped().getStyle(), bot.settings().reboost());
            var sarNpc = sarachnis.getNpc();
            if (sarNpc == null) return;
            this.handlePrayer();
            var target = Players.getLocal().getTarget();
            var desiredTarget = getDesiredTarget(immobilized());
            //log.debug(desiredTarget);
            if (immobilized()) {
                if (sarNpc.getArea().getSurroundingCoordinates().contains(pos)
                        && sarNpc.equals(desiredTarget)) {
                    attackIfTargetNotSet(sarNpc, target);
                    return;
                } else if (sarNpc.equals(desiredTarget)) {
                    util.eatIfHpAllows(Food.getAny());
                    return;
                }
            }
            attackIfTargetNotSet(desiredTarget, target);
        } catch (Exception e) {
            log.error(e);
            e.printStackTrace();
        }
    }

    private Npc getDesiredTarget(boolean immobilised) {
        var fs = bot.settings().fightStrategy();
        if (fs.equals(FightStrategy.Default)) return sarachnis.getNpc();
        var mage = sarachnis.getNearestMageSpawn();
        if (fs.equals(FightStrategy.MageSpawnKiller)) {
            return mage == null ? sarachnis.getNpc() : mage;
        }
        var melee = sarachnis.getNearestMeleeSpawn();
        if (melee == null && mage == null) return sarachnis.getNpc();
        if (fs.equals(FightStrategy.AllSpawnKiller)) {
            if (immobilised) {
                var p = Players.getLocal().getServerPosition();
                if (mage != null && mage.getArea().getSurroundingCoordinates().contains(p))
                    return mage;
                return melee;
            }
            return mage == null ? melee : mage;
        }
        return sarachnis.getNpc();
    }


    private void attackIfTargetNotSet(Npc npc, Actor target) {
        if (npc == null) return;
        var hp = npc.getHealthGauge();
        var needToSpec = npc.getId() == Sarachnis.ID && hp != null && hp.getPercent() < 33 && loadouts.getSpecLoadout() != null && SpecialAttack.getEnergy() >= this.loadouts.getSpecLoadout().getSpecEnergy();
        if (needToSpec) {
            loadouts.equip(loadouts.getSpecLoadout());
            util.activateSpec();
            if (target == null || !target.equals(npc))
                util.attack(npc);
        } else if (target == null || !target.equals(npc)) {
            loadouts.equip(loadouts.getAnyCombat());
            util.attack(npc);
        } else {
            loadouts.equip(loadouts.getAnyCombat());
        }
    }

    private boolean immobilized() {
        return sarachnis != null && sarachnis.isPlayerIsWebbed();
    }

    @Override
    public void executeLoop() {
    }
}
