package com.neck_flexed.scripts.common;

import com.runemate.game.api.hybrid.entities.GroundItem;
import com.runemate.game.api.hybrid.local.hud.interfaces.Inventory;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.region.GroundItems;
import com.runemate.game.api.script.Execution;
import lombok.extern.log4j.Log4j2;
import org.jetbrains.annotations.Nullable;

import java.util.List;
import java.util.regex.Pattern;

@Log4j2(topic = "Loot")
public class Loot {

    public static boolean waitForLoot(Area area, Pattern alwaysDrops, int timeout) {
        var area2 = area.toRectangular().grow(1, 1);
        if (!Execution.delayUntil(() -> !GroundItems.newQuery().within(area2).names(alwaysDrops).results().isEmpty(), timeout)) {
            log.debug("no loot? must be someone else's kill?");
            return false;
        }
        return true;
    }

    public static LootResult doLoop(Area area, List<String> ignoreList, Pattern[] suppliesCanDrop) {
        return doLoop(area, ignoreList, suppliesCanDrop, 600);
    }

    public static LootResult doLoop(Area area, List<String> ignoreList, Pattern[] suppliesCanDrop, int timeout) {
        var area2 = area == null ? null : area.toRectangular().grow(1, 1);
        var gi = getGroundItemToLoot(area2, ignoreList, suppliesCanDrop);
        if (gi == null) {
            if (Execution.delayUntil(() -> getGroundItemToLoot(area2, ignoreList, suppliesCanDrop) != null, timeout))
                return LootResult.NotDone;
            return LootResult.Done;
        }
        var p = gi.getPosition();
        if (p == null) return LootResult.NotDone;
        var id = gi.getId();
        log.info(String.format("Looting: %s", gi));
        if (Inventory.isFull() && !util.itemStacksAndInInvent((gi))) {
            if (!tryToEmptySlotForLoot(suppliesCanDrop)) {
                log.info("Invent full");
                return LootResult.Full;
            }
        }
        util.take(gi);
        Execution.delayUntil(() -> GroundItems.newQuery().on(p).ids(id).results().isEmpty(), 600, 700);
        return LootResult.NotDone;
    }

    private static boolean tryToEmptySlotForLoot(Pattern[] suppliesCanDrop) {
        var ate = Food.eatAny();
        if (ate) return true;
        var dropItem = Inventory.newQuery().names(suppliesCanDrop).unnoted().results().first();
        if (dropItem != null) {
            if (dropItem.interact("Drink"))
                return true;
        }
        return false;
    }

    public static @Nullable GroundItem getGroundItemToLoot(Area area, List<String> ignoreLoot, Pattern[] suppliesCanDrop) {
        var inventFull = Inventory.isFull();
        var q = GroundItems.newQuery();
        if (area != null) {
            q = q.within(area);

        }
        return q.filter(groundItem -> !ignoreLoot.contains(groundItem.getDefinition().getName())
                                && !(inventFull && Food.isFood(groundItem.getDefinition()))
//                        && !(groundItem.getDefinition().isNoted() &&
//                        !Arrays.stream(suppliesCanDrop).anyMatch(s -> s.matcher(groundItem.getDefinition().getName()).find()))
                ).
                results().nearest();
    }

    public static enum LootResult {
        NotDone,
        Done,
        Full,
    }
}
