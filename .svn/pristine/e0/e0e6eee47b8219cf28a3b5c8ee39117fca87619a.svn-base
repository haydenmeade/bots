package com.neck_flexed.scripts.slayer.barrage;

import com.neck_flexed.scripts.slayer.Location;
import com.neck_flexed.scripts.slayer.SlayerBot;
import com.neck_flexed.scripts.slayer.SlayerBotImpl;
import com.neck_flexed.scripts.slayer.SlayerMonster;
import com.runemate.game.api.hybrid.entities.Npc;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.hybrid.util.collections.Pair;
import com.runemate.game.api.script.framework.listeners.EngineListener;
import com.runemate.game.api.script.framework.listeners.NpcListener;
import com.runemate.game.api.script.framework.listeners.events.DeathEvent;
import com.runemate.game.api.script.framework.listeners.events.NpcSpawnedEvent;
import lombok.extern.log4j.Log4j2;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.stream.Collectors;

@Log4j2(topic = "BarrageListener")
public class BarrageListener implements NpcListener, EngineListener {
    private final Lock lock = new ReentrantLock();
    private final SlayerBotImpl<?> bot;
    private final Location location;
    private final SlayerMonster monster;
    private int tick = 0;
    private boolean isInArea = false;

    public BarrageListener(SlayerBotImpl<?> bot, SlayerMonster monster) {
        this.bot = bot;
        this.monster = monster;
        this.location = monster.getLocation(bot);
    }

    @Override
    public void onTickStart() {
        try {
            this.tick++;
            log.debug("tick: {}, monsters alive {}", tick, getTargetingMe().size());
            var p = Players.getLocal();
            if (p == null) return;
            if (monster == null) return;
            this.isInArea = location.getArea().contains(p);
        } catch (Exception e) {
            log.error(e);
            e.printStackTrace();
        }
    }

    public Npc getNearest() {
        return monster.getNpcsWithin(bot).nearest();
    }

    public Npc getBestTarget() {
        var npcs = monster.getNpcsQuery(bot).results();

        var best = npcs.stream()
                .map(n -> new Pair<>(n, getTargetsAround(n)))
                .max(Comparator.comparingInt(Pair::getRight))
                .orElse(null);
        if (best == null) {
            log.debug("nearest");
            return getNearest();
        }
        log.debug("best: {}, stack size: {}", best.getLeft(), best.getRight());
        return best.getLeft();
    }

    private int getTargetsAround(Npc n) {
        var area = n.getServerPosition().getArea().grow(1, 1);
        return monster.getNpcsQuery(bot).within(area).results().size();
    }

    @Override
    public void onNpcSpawned(NpcSpawnedEvent event) {
        try {
            if (!isInArea) return;
            var npc = event.getNpc();
            if (npc == null) return;
            if (!monster.isMonster(npc)) {
                return;
            }
            if (!location.getArea().contains(npc)) return;

//            try {
//                lock.lock();
//                this.monsters.add(npc);
//            } finally {
//                lock.unlock();
//            }
            log.debug("{} spawned: {}", monster, tick);
        } catch (Exception e) {
            log.error(e);
            e.printStackTrace();
        }
    }


//    @Override
//    public void onNpcAnimationChanged(AnimationEvent event) {
//        try {
//            if (getId(event.getSource()) == Barrage.ID && event.getAnimationId() == Barrage.DEATH_ANIM) {
//                isDead = true;
//                deadArea = barrage.getNpc().getArea();
//                this.barrage = null;
//                this.ticksUntilRespawn = RespawnTicks;
//                bot.addKill();
//            }
//        } catch (Exception e) {
//            log.error("NpcAnimation", e);
//            e.printStackTrace();
//        }
//    }


    @Override
    public void onNpcDeath(DeathEvent event) {
        if (!isInArea) return;
        var source = event.getSource();
        if (source == null) return;
        if (!(source instanceof Npc)) return;
        var npc = (Npc) source;
        if (!Objects.equals(npc.getTarget(), Players.getLocal())) return;
        log.debug("{} dead: {} - {}", monster, tick, event);
        if (bot != null) {
            ((SlayerBot) bot).handleNpcDeath(monster, npc, (Npc) Players.getLocal().getTarget());
        }
    }

    public boolean anyTargetingMe() {
        return !getTargetingMe().isEmpty();
    }

    public List<Npc> getTargetingMe() {
        var p = Players.getLocal();
        if (p == null) return new ArrayList<>();
        return monster.getNpcsWithin(bot).stream().filter(n -> n != null && n.isValid() && Objects.equals(n.getTarget(), p)).collect(Collectors.toList());
    }

    public boolean allTargetingMe() {
        var p = Players.getLocal();
        if (p == null) return false;
        try {
            lock.lock();
            return monster.getNpcsWithin(bot).stream().allMatch(n -> Objects.equals(n.getTarget(), p));
        } finally {
            lock.unlock();
        }
    }

    public boolean allAreDead() {
        return !anyTargetingMe();
    }

}
