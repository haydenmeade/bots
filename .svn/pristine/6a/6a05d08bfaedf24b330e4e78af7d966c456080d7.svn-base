package com.neck_flexed.scripts.dk;

import com.google.common.base.Stopwatch;
import com.neck_flexed.scripts.common.*;
import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.input.direct.MenuAction;
import com.runemate.game.api.hybrid.local.Rune;
import com.runemate.game.api.hybrid.local.hud.interfaces.Health;
import com.runemate.game.api.hybrid.local.hud.interfaces.Inventory;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.osrs.local.AchievementDiary;
import com.runemate.game.api.osrs.local.SpecialAttack;
import com.runemate.game.api.osrs.local.hud.interfaces.Magic;
import com.runemate.game.api.script.framework.core.EventDispatcher;
import com.runemate.game.api.script.framework.listeners.EngineListener;
import lombok.extern.log4j.Log4j2;

import java.util.concurrent.TimeUnit;

@Log4j2(topic = "FightState")
public class FightState implements LoopState<DkState>, EngineListener {
    private final DkListener dkListener;
    private final PrayerFlicker prayerFlicker;
    private final dk bot;
    private final DkSettings settings;
    private final Loadouts loadouts;
    private final Area currentBossArea;
    private final boolean hasEliteFrem;
    private boolean done = false;
    private King prevTarget;
    private King currentTarget;
    private boolean canBlood = false;
    private boolean looting = false;

    public FightState(DkListener dkListener,
                      PrayerFlicker prayerFlicker,
                      dk bot,
                      DkSettings settings,
                      Loadouts loadouts,
                      Area currentBossArea) {
        this.dkListener = dkListener;
        this.prayerFlicker = prayerFlicker;
        this.bot = bot;
        this.settings = settings;
        this.loadouts = loadouts;
        this.currentBossArea = currentBossArea;
        this.hasEliteFrem = AchievementDiary.FREMENNIK.isEliteComplete();
    }

    @Override
    public DkState deactivate(EventDispatcher d) {
        d.removeListener(this);
        if (bot.isSlayerTaskDone()) {
            log.debug("deactivate finished slayer task");
            return DkState.LOOTING;
        }
        if (!dkListener.needToOffTick().isEmpty()) {
            log.debug("deactivate offtick");
            return DkState.OFF_TICK;
        }
        if (King.getNearestKing() == null) {
            log.debug("deactivate no king");
            return DkState.LOOTING;
        }
        log.debug("deactivate other");
        return DkState.STARTING;
    }

    @Override
    public void activate(EventDispatcher d) {
        d.addListener(this);
        this.canBlood = Magic.Book.ANCIENT.isCurrent() && Rune.BLOOD.getQuantity() > 4 && Rune.DEATH.getQuantity() > 4 && Rune.SOUL.getQuantity() > 1;
    }

    @Override
    public DkState get() {
        return DkState.FIGHTING;
    }

    @Override
    public String fatalError() {
        return null;
    }

    @Override
    public boolean done() {
        return King.getNearestKing() == null || !dkListener.needToOffTick().isEmpty() || bot.isSlayerTaskDone();
    }


    @Override
    public void onTickStart() {
        try {
            Stopwatch timer = Stopwatch.createStarted();
            if (currentTarget == null || currentTarget.getNpc() == null || dkListener.isDead(currentTarget)) {
                currentTarget = getNewTarget();
                if (currentTarget != null)
                    log.debug(String.format("New Target: %s", currentTarget.getName()));
            }
            if (currentTarget == null || currentTarget.getNpc() == null) {
                log.debug("Null target");
                return;
            }

            var npc = currentTarget.getNpc();
            var p = Players.getLocal();
            if (p == null) {
                log.error("null player");
                return;
            }

            var currentStyle = currentTarget.getAttackWith();
            util.boostIfNeeded(currentStyle);
            this.dkListener.setBoost(util.getBoostPrayersA(currentStyle));

            var specl = this.loadouts.getSpecLoadout();
            if (specl != null && specl.getStyle().equals(currentStyle) &&
                    SpecialAttack.getEnergy() >= specl.getSpecEnergy()) {
                log.debug(String.format("Speccing %s", currentTarget.getName()));
                loadouts.equip(specl);
                util.activateSpec();
                if (p.getTarget() == null || !p.getTarget().equals(npc)) {
                    util.attack(npc);
                }
                if (timer.elapsed(TimeUnit.MILLISECONDS) > 500)
                    log.debug("Spec Duration: " + timer.elapsed(TimeUnit.MILLISECONDS) + " ms");
                return;
            }

            loadouts.equipStyle(currentStyle);

            if (timer.elapsed(TimeUnit.MILLISECONDS) > 500)
                log.debug("Equip Duration: " + timer.elapsed(TimeUnit.MILLISECONDS) + " ms");
            if (canBlood
                    && currentTarget.equals(King.Rex)
                    && Health.getCurrentPercent() < 90
            ) {
                var sp = getBloodSpell();
                if (sp != null) {
                    log.debug(String.format("Blood spell %s", currentTarget.getName()));
                    DirectInput.sendSpellCastOn(sp, npc);
                    return;
                }
            }

            if (currentStyle.equals(CombatStyle.Ranged) || currentStyle.equals(CombatStyle.Magic)) {
                quickLoot();
            }
            if (looting) return;
            if (!hasEliteFrem) {
                buryBone();
            }

            if (p.getTarget() != null && p.getTarget().equals(npc)) {
                log.debug("target already set");
                return;
            }

            util.attack(npc);

            if (timer.elapsed(TimeUnit.MILLISECONDS) > 500)
                log.debug("Attack Duration: " + timer.elapsed(TimeUnit.MILLISECONDS) + " ms");

        } catch (Exception e) {
            log.error(e);
            e.printStackTrace();
        }
    }

    private void buryBone() {
        var bone = Inventory.newQuery()
                .names("Dagannoth bones")
                .unnoted()
                .actions("Bury")
                .results()
                .first();
        if (bone == null) return;
        DirectInput.send(MenuAction.forSpriteItem(bone, "Bury"));
    }

    private Magic.Ancient getBloodSpell() {
        return Magic.Ancient.BLOOD_BARRAGE;
    }

    private Loot.LootResult quickLoot() {
        // TODO attack range.
        try {
            this.looting = true;
            Stopwatch timer = Stopwatch.createStarted();
            var r = Loot.doLoop(
                    null
                    , LootingState.currentIgnoreList
                    , bot.settings().boostMelee().patternAny()
                    , 50, 1800
            );
            if (timer.elapsed(TimeUnit.MILLISECONDS) > 500)
                log.debug("Loot Duration: " + timer.elapsed(TimeUnit.MILLISECONDS) + " ms");
            return r;
        } finally {
            this.looting = false;
        }
    }


    // Supreme>Prime>Rex.
    private King getNewTarget() {
        var attackers = King.getAttackingKings();
        if (!attackers.isEmpty()) {
            if (attackers.contains(King.Supreme))
                return King.Supreme;
            else if (attackers.contains(King.Prime)) {
                return King.Prime;
            } else if (attackers.contains(King.Rex)) {
                return King.Rex;
            }
        }
        var all = King.getAllKings();
        if (!all.isEmpty()) {
            if (all.contains(King.Supreme))
                return King.Supreme;
            else if (all.contains(King.Prime)) {
                return King.Prime;
            } else if (all.contains(King.Rex)) {
                return King.Rex;
            }
        }
        return null;
    }

    @Override
    public void executeLoop() {
        if (currentTarget == null && prevTarget != null) {
            bot.updateStatus("Fighting");
            prevTarget = null;
        } else if (currentTarget != null && !currentTarget.equals(prevTarget)) {
            bot.updateStatus(String.format("Fighting: %s", currentTarget.getName()));
            prevTarget = currentTarget;
        }
    }
}
