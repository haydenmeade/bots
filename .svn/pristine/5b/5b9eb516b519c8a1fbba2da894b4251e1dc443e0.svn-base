package com.neck_flexed.scripts.slayer.barrage;

import com.neck_flexed.scripts.common.state.BaseState;
import com.neck_flexed.scripts.common.util;
import com.neck_flexed.scripts.slayer.SlayerBotImpl;
import com.neck_flexed.scripts.slayer.state.SlayerState;
import com.runemate.game.api.hybrid.entities.Actor;
import com.runemate.game.api.hybrid.entities.Npc;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.location.navigation.Traversal;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import com.runemate.game.api.script.framework.listeners.EngineListener;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.EventListener;

public class SmokeDevilStackingState extends BaseState<SlayerState> implements EngineListener {
    public static Coordinate[] SMOKE_STACK_SKELE = new Coordinate[]{
            new Coordinate(2393, 9442, 0),
            new Coordinate(2392, 9443, 0),
            new Coordinate(2393, 9445, 0),
    };
    public static Coordinate[] SMOKE_STACK_NS = new Coordinate[]{
            new Coordinate(2398, 9434, 0),
            new Coordinate(2398, 9452, 0),
            new Coordinate(2392, 9443, 0),
    };
    private final SlayerBotImpl<?> bot;
    private final BarrageListener listener;
    private final Coordinate[] tiles;
    private int stackIdx = 0;
    private int cooldown = 0;

    public SmokeDevilStackingState(SlayerBotImpl<?> bot, BarrageListener listener) {
        super(bot, SlayerState.STACKING);
        this.bot = bot;
        this.listener = listener;
        this.tiles = SMOKE_STACK_NS;
    }

    public static boolean restackDone(BarrageListener listener) {
        var nearest = listener.getNearest();
        if (nearest != null) {
            var nearestarea = listener.getAround(nearest, 1);
            if (nearestarea.size() > 6) return true;
        }

        var monsters = new ArrayList<Npc>(listener.getTargetingMe());
        var area = Area.polygonal(
                monsters.stream().map(Actor::getServerPosition).distinct().toArray(Coordinate[]::new)
        ).toRectangular();
        return area.getWidth() <= 3 && area.getHeight() <= 3;
    }

    @Override
    public EventListener[] getEventListeners() {
        return new EventListener[]{this, listener};
    }

    @Override
    public void activate() {
        bot.updateStatus("Stacking Smoke Devil");
        this.bot.prayerFlicker.setQuickPrayers(util.getMagicBoostPrayer(), Prayer.PROTECT_FROM_MISSILES);
    }

    @Override
    public @Nullable String fatalError() {
        return null;
    }

    @Override
    public void onTickStart() {
        cooldown--;
        if (cooldown > 0) return;
        var p = Players.getLocal();
        if (p == null) return;
        var pos = p.getServerPosition();
        if (pos == null) return;

        if (stackIdx >= tiles.length) stackIdx = 0;
        var nextTile = tiles[stackIdx];
        util.moveTo(nextTile);
        cooldown = 16;
        stackIdx++;
    }

    @Override
    public boolean done() {
        return restackDone(this.listener);
    }

    @Override
    public void executeLoop() {
        if (!Traversal.isRunEnabled() && Traversal.getRunEnergy() > 2)
            Traversal.toggleRun();
    }
}
