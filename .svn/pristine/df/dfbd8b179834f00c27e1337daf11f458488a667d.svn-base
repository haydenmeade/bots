package com.neck_flexed.scripts.common.traverse;

import com.neck_flexed.scripts.common.HouseConfig;
import com.neck_flexed.scripts.common.HouseUtil;
import com.neck_flexed.scripts.common.Xeric;
import com.neck_flexed.scripts.common.util;
import com.runemate.game.api.hybrid.input.Keyboard;
import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.input.direct.MenuAction;
import com.runemate.game.api.hybrid.local.House;
import com.runemate.game.api.hybrid.local.hud.interfaces.InterfaceContainers;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.script.Execution;
import lombok.extern.log4j.Log4j2;

@Log4j2
public class HouseXericTraverse implements TraverseMethod {
    private final Xeric dest;

    public HouseXericTraverse(Xeric dest) {
        this.dest = dest;
    }

    @Override
    public boolean hasSupport(HouseConfig houseConfig) {
        return houseConfig.isHasMountedXerics();
    }

    @Override
    public boolean doTraverseLoop(HouseConfig houseConfig, Coordinate startPosition) {
        if (!House.isInside()) {
            util.teleToHouse();
            return false;
        }
        var talisman = HouseUtil.getMountedXerics();
        if (talisman == null) {
            log.error("No mounted xerics found");
            return false;
        }
        if (talisman.getActiveDefinition().getActions().contains(dest.getRightClick())) {
            DirectInput.send(MenuAction.forGameObject(talisman, dest.getRightClick()));
            return Execution.delayUntil(() -> Players.getLocal().getServerPosition().getContainingRegionId() != startPosition.getContainingRegionId(),
                    util::playerAnimatingOrMoving,
                    2000, 5000);
        }
        if (!talisman.interact("Teleport menu")) return false;
        if (!Execution.delayUntil(() -> InterfaceContainers.getAt(187) != null, 1000, 2000))
            return false;
        Keyboard.pressKey(dest.getKey());
        return Execution.delayUntil(() -> Players.getLocal().getServerPosition().getContainingRegionId() != startPosition.getContainingRegionId(),
                util::playerAnimatingOrMoving,
                2000, 5000);
    }
}
