package com.neck_flexed.scripts.common;

import com.google.common.base.Stopwatch;
import com.runemate.game.api.client.ClientUI;
import com.runemate.game.api.hybrid.input.Keyboard;
import com.runemate.game.api.hybrid.local.hud.interfaces.Bank;
import com.runemate.game.api.hybrid.local.hud.interfaces.Chatbox;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.script.Execution;
import com.runemate.game.api.script.framework.LoopingBot;
import com.runemate.game.api.script.framework.listeners.ChatboxListener;
import com.runemate.game.api.script.framework.listeners.SettingsListener;
import com.runemate.game.api.script.framework.listeners.events.MessageEvent;
import com.runemate.game.api.script.framework.listeners.events.SettingChangedEvent;
import com.runemate.ui.DefaultUI;
import com.runemate.ui.setting.open.Settings;
import lombok.extern.log4j.Log4j2;

import java.util.Arrays;
import java.util.EventListener;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

@Log4j2(topic = "NeckBot")
public abstract class NeckBot<TSettings extends Settings, TState extends Enum> extends LoopingBot implements SettingsListener, ChatboxListener {
    private static final String INVENT_FULL_MSG = "You don't have enough free inventory space to do that.";
    public Loadouts loadouts;
    public PrayerFlicker prayerFlicker = new PrayerFlicker();
    public Junk junkDropper = new Junk();
    public BreakManager breakManager;
    protected boolean ignoreLoadouts = false;
    protected boolean started = false;
    protected Runnable diFixRunnable = new Runnable() {
        public void run() {
            Execution.delay(100, 1050);
            Keyboard.pressKey(8);
        }
    };
    protected LoopState<TState> currentState;
    protected TState forcedState = null;
    private int killCount = 0;
    private boolean loaded = false;

    @Override
    public void onMessageReceived(MessageEvent event) {
        if (isPaused() || !started) return;
        if (!Objects.equals(event.getType(), Chatbox.Message.Type.SERVER)) return;
        var msg = event.getMessage();
        if (msg == null) return;
        if (msg.endsWith("It then crumbles to dust.")) {
            log.debug("Bracelet crumbled {}", event);
            this.loadouts.invalidateCurrent();
        } else if (Objects.equals(msg, INVENT_FULL_MSG)) {
            log.debug("Invent full message {}", event);
            if (!Food.dropWorst()) {
                log.error("error equiping 2h weapon");
                this.pause("error equiping 2h weapon");
                this.updateStatus("error equiping 2h weapon");
            }
            this.loadouts.invalidateCurrent();
        }

    }

    @Override
    public void onStop(String reason) {
        if (this.prayerFlicker != null) {
            this.prayerFlicker.setActivePrayers();
        }
    }

    public final int getKillCount() {
        return killCount;
    }

    public final void addKill() {
        this.killCount++;
    }

    public final void addListener(EventListener l) {
        if (!this.getEventDispatcher().getListeners().stream().anyMatch(
                e -> e.getClass().getName().equals(l.getClass().getName()))) {
            log.debug(String.format("Add listener %s", l.getClass().getName()));
            this.getEventDispatcher().addListener(l);
        }
    }

    @Override
    public final void onResume() {
        super.onResume();
        log.debug(String.format("resumed"));
        if (started) {
            resetKill();
            if (this.currentState == null || !this.currentState.get().equals(this.getBreakStateEnum()))
                this.forceState(this.getStartStateEnum());
            for (var l : this.getEventListenerForRunning()) {
                addListener(l);
            }
        }
    }

    @Override
    public final void onPause() {
        super.onPause();
        log.debug("paused");
        if (this.prayerFlicker != null) {
            this.prayerFlicker.setActivePrayers();
        }
        for (var l : this.getEventListenerForRunning()) {
            removeListener(l);
        }
        if (this.currentState != null) {
            this.currentState.deactivate(this.getEventDispatcher());
            this.currentState = this.getStartingState();
            forceState(this.getStartStateEnum());
        }
    }

    protected abstract EventListener[] getEventListenerForRunning();

    public final void removeListener(EventListener l) {
        if (l == null) return;
        if (l.getClass() != null)
            log.debug(String.format("Remove listener %s", l.getClass().getName()));
        this.getEventDispatcher().removeListener(l);
    }

    public abstract void resetKill();

    protected abstract void initFromSettings(TSettings settings);

    @Override
    public final void onSettingChanged(SettingChangedEvent settingChangedEvent) {
        log.debug(settingChangedEvent);
    }

    @Override
    public final void onSettingsConfirmed() {
        log.debug("Settings confirmed");
        this.started = true;
        if (!isPaused()) {
            resetKill();
            for (var l : this.getEventListenerForRunning()) {
                addListener(l);
            }
        }
        if (settings() != null) {
            Stopwatch timer = Stopwatch.createStarted();
            this.updateStatus("Loading... can take a minute depending on number of loadouts");
            initFromSettings(settings());
            this.updateStatus("Loading Finished");
            log.debug("Load settings done in: " + timer.elapsed(TimeUnit.MILLISECONDS) + " ms");
        } else {
            log.error("Null settings");
            this.updateStatus("Null settings");
            this.pause("Null settings");
        }
        this.loaded = true;
    }

    protected abstract LoopState<TState> getState(TState s);

    protected abstract LoopState<TState> getStartingState();

    protected abstract TState getBreakStateEnum();

    protected abstract TState getStartStateEnum();

    @Override
    public final void onLoop() {
        if (this.isPaused()
                || !this.started
                || this.settings() == null
                || !this.loaded
                || Players.getLocal() == null
        ) return;
        if (currentState == null) {
            if (!ignoreLoadouts) {
                if (this.loadouts == null) {
                    ClientUI.showAlert(ClientUI.AlertLevel.ERROR,
                            "Unable to load loadouts, please check you have filled in loadouts and update settings.");
                    this.pause("Loadout error");
                    return;
                }
                this.loadouts.setCurrentFromEquipmentOrEquip(this.loadouts.getAnyCombat());
                if (this.loadouts.getEquipped() == null) {
                    ClientUI.showAlert(ClientUI.AlertLevel.ERROR,
                            "Unable to set current loadout, please refresh loadouts and try again.");
                    this.pause("Loadout equip error");
                    return;
                }
            }
            this.currentState = getStartingState();
        }
        if (currentState.fatalError() != null && !currentState.fatalError().isEmpty()) {
            log.error(String.format("Fatal error from %s: %s", currentState.get(), currentState.fatalError()));
            updateStatus(String.format("STOPPING during %s, error: %s", currentState.fatalError(), currentState.get()));
            this.stop(currentState.fatalError());
            return;
        }
        if (currentState.done() || (forcedState != null && this.forcedState != currentState.get())) {
            var tState = currentState.deactivate(this.getEventDispatcher());
            var newState = forcedState == null ? tState : forcedState;
            var newStateImpl = this.getState(newState);
            newStateImpl.activate(this.getEventDispatcher());
            var oldState = this.currentState;
            this.currentState = newStateImpl;
            if (forcedState != null) {
                log.debug(String.format("FORCE change state from %s to %s", oldState.get(), newState));
            } else {
                log.debug(String.format("Change state from %s to %s", oldState.get(), newState));
            }
        }
        forcedState = null;
        if (currentState != null && !currentState.done())
            currentState.executeLoop();
    }

    public final void forceState(TState state) {
        this.forcedState = state;
    }

    public abstract void updateStatus(String s);

    protected final void updateItemFilter(Pattern[] stuff) {
        try {
            var s = settings();
            if (s == null) return;


            var supplies = util.joinLists(
                    items.rangedBoosts,
                    items.prayerRestores,
                    items.antiPoisonPP,
                    items.attackBoosts,
                    items.strengthBoosts,
                    items.defenceBoosts,
                    items.combatBoosts
            );
            DefaultUI.setItemEventFilter(this,
                    (e -> {
                        if (Bank.isOpen()) return false;
                        var n = e.getItem().getDefinition().getName();
                        var r1 = Arrays.stream(stuff).anyMatch(pattern -> pattern.asMatchPredicate().test(n));
                        if (r1) return false;
                        var id = e.getItem().getId();
                        var r2 = supplies.stream().anyMatch(i -> i == id);
                        if (r2) return false;
                        return true;
                    }));
        } catch (Exception e) {
            log.error("Unable to updateItemFilter", e);
        }
    }

    public abstract TSettings settings();
}
