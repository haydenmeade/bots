package com.neck_flexed.scripts.cerberus;

import com.neck_flexed.scripts.common.*;
import com.runemate.game.api.script.framework.core.EventDispatcher;
import lombok.extern.log4j.Log4j2;

import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.regex.Pattern;

@Log4j2(topic = "LootState")
public class LootState implements LoopState<CerbState> {
    private final CerbListener cerbListener;
    private final cerb bot;
    private final BreakManager breakManager;
    private Loot.LootResult result = Loot.LootResult.NotDone;

    public LootState(CerbListener cerbListener, cerb bot, BreakManager breakManager) {
        this.cerbListener = cerbListener;
        this.bot = bot;
        this.breakManager = breakManager;
    }

    public List<String> getIgnoreLoot() {
        if (bot.settings().fightStrategy().equals(FightStrategy.Default))
            return Arrays.asList(
                    "Unholy symbol",
                    "Steel arrow",
                    "Iron arrow",
                    "Mithril bar",
                    "Uncut ruby",
                    "Adamant javelin",
                    "Uncut sapphire",
                    "Uncut emerald",
                    "Nature talisman");
        return Arrays.asList(
                "Unholy symbol",
                "Summer pie",
                "Steel arrow",
                "Iron arrow",
                "Mithril bar",
                "Uncut ruby",
                "Super restore(4)",
                "Adamant javelin",
                "Uncut sapphire",
                "Uncut emerald",
                "Nature talisman");
    }

    @Override
    public void activate(EventDispatcher d) {
        bot.updateStatus("Looting");
        if (cerbListener.getDeadArea() == null) return;
        util.moveTo(cerbListener.getDeadArea().getCenter());
        Loot.waitForLoot(cerbListener.getDeadArea(), Pattern.compile(".*"), 1200);
    }

    @Override
    public CerbState deactivate(EventDispatcher d) {
        bot.resetKill();

        if (!util.hasSlayerTask()) {
            bot.updateStatus("Finished slayer task");
            util.teleToHouse();
            bot.stop("Slayer task completed");
        }

        if (bot.doWeNeedToRestock() || result.equals(Loot.LootResult.Full) || this.breakManager.breaking() || this.breakManager.stopBot()) {
            return CerbState.RESTORING;
        } else {
            return CerbState.POST_LOOT_WAITING;
        }
    }

    @Override
    public CerbState get() {
        return CerbState.LOOTING;
    }

    @Override
    public String fatalError() {
        return null;
    }

    @Override
    public boolean done() {
        return !Objects.equals(this.result, Loot.LootResult.NotDone);
    }

    @Override
    public void executeLoop() {
        this.result = Loot.doLoop(
                this.cerbListener.getDeadArea()
                , getIgnoreLoot()
                ,
                bot.settings().boost().equals(Boost.ImbuedHeart)
                        ? new Pattern[0]
                        : bot.settings().boost().patternAny()
                , 4000
        );
    }
}
