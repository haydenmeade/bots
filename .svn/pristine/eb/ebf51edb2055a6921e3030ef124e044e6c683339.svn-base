package com.neck_flexed.scripts.slayer.barrage;

import com.neck_flexed.scripts.common.NeckBot;
import com.neck_flexed.scripts.common.state.BaseState;
import com.neck_flexed.scripts.common.util;
import com.neck_flexed.scripts.slayer.state.SlayerState;
import com.runemate.game.api.hybrid.entities.Npc;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.navigation.Traversal;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import com.runemate.game.api.script.framework.listeners.EngineListener;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.EventListener;

public class StackingState extends BaseState<SlayerState> implements EngineListener {
    private final NeckBot<?, SlayerState> bot;
    private final BarrageListener listener;
    private final BarrageMonster barrageMonster;
    private boolean done = false;

    public StackingState(NeckBot<?, SlayerState> bot,
                         BarrageMonster barrageMonster,
                         BarrageListener listener) {
        super(SlayerState.STACKING);
        this.bot = bot;
        this.listener = listener;
        this.barrageMonster = barrageMonster;
    }

    @Override
    public EventListener[] getEventListeners() {
        return new EventListener[]{this, listener};
    }

    @Override
    public void activate() {
        bot.updateStatus("Stacking");
        this.bot.prayerFlicker.setActivePrayers(Prayer.PROTECT_FROM_MELEE);
    }


    @Override
    public @Nullable String fatalError() {
        return null;
    }

    @Override
    public void onTickStart() {
        var p = Players.getLocal();
        if (p == null) return;
        var pos = p.getServerPosition();
        if (pos == null) return;
        if (pos.equals(barrageMonster.getTile1())) {
            util.moveTo(barrageMonster.getTile2());
        } else {
            util.moveTo(barrageMonster.getTile1());
        }
    }

    @Override
    public boolean done() {
        return this.done
                || (barrageMonster.equals(BarrageMonster.Nechryael) && barrageMonster.isSuperiorPresent())
                || Traversal.getRunEnergy() <= 1;
    }

    @Override
    public void executeLoop() {
        var monsters = new ArrayList<Npc>(this.listener.getTargetingMe());
        var mustBeWithin = Area.rectangular(barrageMonster.getTile1(), barrageMonster.getTile2()).grow(1, 1);
        this.done = monsters.stream().allMatch(m -> mustBeWithin.contains(m.getServerPosition()));
        if (!Traversal.isRunEnabled() && Traversal.getRunEnergy() > 2)
            Traversal.toggleRun();
    }
}
