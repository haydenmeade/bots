package com.neck_flexed.scripts.slayer.turael;

import com.neck_flexed.scripts.common.*;
import com.neck_flexed.scripts.common.breaking.BreakHandlerState;
import com.neck_flexed.scripts.common.breaking.BreakManager;
import com.neck_flexed.scripts.common.state.HoppingState;
import com.neck_flexed.scripts.common.state.IStateManager;
import com.neck_flexed.scripts.common.state.LoopState;
import com.neck_flexed.scripts.common.state.RestoreState;
import com.neck_flexed.scripts.slayer.SlayerState;
import com.runemate.game.api.hybrid.local.hud.interfaces.ChatDialog;
import com.runemate.game.api.hybrid.local.hud.interfaces.Inventory;
import com.runemate.game.api.hybrid.local.hud.interfaces.NpcContact;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.osrs.local.hud.interfaces.Magic;
import com.runemate.game.api.script.Execution;
import com.runemate.ui.DefaultUI;
import com.runemate.ui.setting.annotation.open.SettingsProvider;
import javafx.scene.text.Text;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.log4j.Log4j2;
import org.apache.commons.lang3.tuple.Triple;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Arrays;
import java.util.EventListener;
import java.util.Objects;
import java.util.regex.Pattern;

@Log4j2(topic = "TuraelMain")
public class bot extends NeckBot<TuraelSettings, SlayerState> {
    private Consumeables<TuraelSettings, SlayerState> consumeables;
    @SettingsProvider(updatable = true)
    private TuraelSettings settings;

    @Getter
    @Setter
    @Nullable
    private NeckInventory inventory;
    @Getter
    @Setter
    @Nullable
    private Monster previousMonster;

    public boolean doesTaskMatch(String task, @NotNull String skipFor) {
        var skipList = Arrays.stream(skipFor.split(","))
                .map(s -> Pattern.compile(s, Pattern.CASE_INSENSITIVE));
        return task != null && skipList.anyMatch(r -> r.asMatchPredicate().test(task));
    }

    public boolean npcContactSlayerTaskFrom(NpcContact.Contact contact, @Nullable String startTask) {
        if (!Objects.equals(SlayerTask.getCurrent(), startTask)) {
            if (!ChatDialog.isOpen()) return true;
            util.moveTo(Players.getLocal().getServerPosition());
            Execution.delayUntil(() -> !ChatDialog.isOpen(), 600, 1200);
            return false;
        }

        if (!ChatDialog.isOpen()) {
            if (!NpcContact.isOpen()) {
                Magic.Lunar.NPC_CONTACT.activate();
                Execution.delayUntil(NpcContact::isOpen,
                        util::playerAnimating,
                        5000, 7000);
                return false;
            }
            NpcContact.cast(contact);
            Execution.delayUntil(ChatDialog::isOpen,
                    util::playerAnimating,
                    5000, 7000);
            return false;
        }
        return slayerTaskDialogue(startTask);
    }

    public boolean slayerTaskDialogue(@Nullable String startTask) {
        if (!Objects.equals(SlayerTask.getCurrent(), startTask)) {
            if (!ChatDialog.isOpen()) return true;
            util.moveTo(Players.getLocal().getServerPosition());
            Execution.delayUntil(() -> !ChatDialog.isOpen(), 600, 1200);
            return false;
        }

        var cont = ChatDialog.getContinue();
        if (cont != null && cont.isValid()) {
            if (!cont.select()) {
                log.error("Unable to continue dialague {}", cont);
            }
            Execution.delay(300, 400);
            return false;
        }
        var opt = ChatDialog.getOption(1);
        if (opt != null && opt.isValid()) {
            if (!opt.select()) {
                log.error("Unable to select option {}", opt);
            }
            Execution.delay(300, 400);
        }
        return false;
    }

    public boolean doWeNeedToRestock() {
        if (settings() == null) return false;
        var boost = settings().boost();
        if (boost != Boost.None && boost != Boost.ImbuedHeart && Inventory.getItems(boost.patternAny()).isEmpty()) {
            return true;
        }
        var inv = this.getInventory();
        if (inv != null) {
            var newInv = NeckInventory.createInventory();
            if (newInv.getMap().size() < inv.getMap().size()) {
                return true;
            }
        }
        return false;
    }

    public void resetKill() {

    }

    @Override
    protected void initFromSettings(TuraelSettings settings) {
        this.loadouts = Loadouts.fromEquipmentLoadouts(
                Triple.of(settings().equipment(), Loadout.LoadoutRole.Combat, "")
        );
        this.breakManager = new BreakManager(settings, this);
        updateItemFilter(util.concatenate(
                new Pattern[]{Pattern.compile("Stamina potion.*"), items.ringOfDueling, items.dramenStaff,},
                util.toItemList(settings.equipment())
        ));
        if (Players.getLocal() != null && Inventory.getItems() != null && !Inventory.getItems().isEmpty()) {
            var inv = NeckInventory.createInventory();
            log.debug("Initializing inventory: " + inv);
            this.setInventory(inv);
        }
    }

    @Override
    protected EventListener[] getEventListenerForRunning() {
        return new EventListener[]{prayerFlicker, consumeables, junkDropper};
    }

    @Override
    public void onStart(String... arguments) {
        super.onStart(arguments);
        log.debug(String.format("onStart"));
        consumeables = new Consumeables(this, 10, SlayerState.RESTORING, false);

        this.getEventDispatcher().addListener(this);
        this.breakManager = new BreakManager(settings, this);
        this.setLoopDelay(10, 25);
        DefaultUI.addPanel(0, this, "Instructions", new Text(
                "--BETA--\n" +
                        "Start me from anywhere, for example inventory setup, see Neck Discord\n\n" +
                        "MUST: For supported teleports, see bot description or Neck Discord\n" +
                        "Supports: NPC Contact --> have runes for NPC Contact and be on lunars\n" +
                        "Bot will detect your inventory on start and maintain it.\n\n" +
                        "Do not wield items that will degrade like ring of dueling, bot won't detect and restock this\n" +
                        "If you have any issues or suggestions visit the Neck Discord\n" +
                        "If you want to request more traverse methods visit the Neck Discord\n"
        ));
    }

    protected LoopState<SlayerState> getState(SlayerState s) {
        switch (s) {
            case STARTING:
                return new StartingState(this);
            case TRAVERSING:
                return new TraverseState(this);
            case FIGHTING:
                return new FightState(this);
            case GET_MASTER_TASK:
                return new GetMasterTask(this);
            case GET_NEW_TASK:
                return new GetNewTaskState(this, this.previousMonster);
            case GET_TURAEL_TASK:
                return new TuraelTaskGetterState(this);
            case RESTORING:
                return new RestoreState<>(this, SlayerState.RESTORING, HouseConfig.parse(settings), false);
            case HOPPING:
                return new HoppingState<>(this, settings().worldRegion(), SlayerState.HOPPING);
            case RESTOCKING:
                return new RestockState(this);
            case BREAKING:
                return new BreakHandlerState<>(this.breakManager, this, SlayerState.BREAKING);
            default:
                throw new IllegalStateException("Unexpected value: " + s);
        }
    }

    @Override
    protected LoopState<SlayerState> getStartingState() {
        return new StartingState(this);
    }

    @Override
    protected SlayerState getBreakStateEnum() {
        return SlayerState.BREAKING;
    }

    @Override
    protected SlayerState getStartStateEnum() {
        return SlayerState.STARTING;
    }

    @Override
    protected IStateManager<SlayerState> createStateManager() {
        return new TuraelStateManager(this);
    }

    @Override
    public void updateStatus(String s) {
        var debugString = String.format("%s - Turael tasks done: %d", s, this.getKillCount());
        log.debug(debugString);
        DefaultUI.setStatus(this, debugString);
    }

    @Override
    public TuraelSettings settings() {
        return settings;
    }
}
