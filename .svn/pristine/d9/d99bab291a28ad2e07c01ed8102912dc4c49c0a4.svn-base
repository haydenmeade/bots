package com.neck_flexed.scripts.mole;

import com.neck_flexed.scripts.common.*;
import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.local.hud.interfaces.Bank;
import com.runemate.game.api.hybrid.local.hud.interfaces.Inventory;
import com.runemate.game.api.hybrid.region.Banks;
import com.runemate.game.api.script.Execution;
import com.runemate.game.api.script.framework.core.EventDispatcher;
import lombok.extern.log4j.Log4j2;

import java.util.regex.Pattern;

@Log4j2(topic = "RestockState")
public class RestockState implements LoopState<MoleState> {
    private String error = null;

    @Override
    public void activate(EventDispatcher d) {
        Mole.updateStatus(String.format("Restocking"));
    }

    @Override
    public MoleState deactivate(EventDispatcher d) {
        return MoleState.TRAVERSING;
    }

    @Override
    public MoleState get() {
        return MoleState.RESTOCKING;
    }

    @Override
    public String fatalError() {
        return error;
    }

    @Override
    public boolean done() {
        return true;
    }

    @Override
    public void executeLoop() {
        Execution.delayUntil(() -> !Banks.getLoaded().isEmpty() && Banks.getLoaded().nearest() != null, 5000);
        if (Banks.getLoaded().nearest() == null) {
            error = "unable to load bank";
            return;
        }
        DirectInput.sendMovement(Banks.getLoaded().nearest().getPosition());

        if (!Execution.delayUntil(() -> Bank.open(), 30000)) {
            error = "unable to open bank";
            return;
        }

        Pattern[] x = util.concatenate(
                util.toPatternArray(new String[]{"Rune pouch", "Dust rune", "Law rune", "Earth rune", "Air rune", "Water rune", "Fire rune", "Nature rune", "Mist rune", "Mud rune", "Smoke rune", "Steam rune", "Lava rune",
                        items.houseTab, items.imbuedHeart, items.saturatedHeart, items.spade,
                }),
                new Pattern[]{Mole.falShield, MoleState.getSettings().light().getPattern(), items.ringOfDueling,},
                util.toItemList(MoleState.getSettings().equipment()),
                util.toItemList(MoleState.getSettings().specEquipment())
        );
        Bank.depositAllExcept(x);
        if (!Inventory.contains(items.spade)) {
            Bank.withdraw(items.spade, 1);
        }
        if (!Inventory.contains(Mole.falShield)) {
            Bank.withdraw(Mole.falShield, 1);
        }
        if (!MoleState.getSettings().light().equals(LightSource.None) &&
                !Inventory.contains(MoleState.getSettings().light().getPattern())) {
            Bank.withdraw(MoleState.getSettings().light().getPattern(), 1);
        }

        if (MoleState.getSettings().RestoreAndBankStrategy() == RestoreAndBankStrategy.RingOfDueling &&
                !Inventory.contains(items.ringOfDueling)) {
            Bank.withdraw(items.ringOfDueling, 1);
        }
        NeckBank.withdrawBoost(MoleState.getSettings().boost(), MoleState.getSettings().boostAmount());
        Bank.withdraw("Stamina potion(4)", MoleState.getSettings().staminaAmount());
        Bank.withdraw(MoleState.getFood(), 2);
        Bank.close();
    }
}
