package com.neck_flexed.scripts.slayer;

import com.neck_flexed.scripts.common.PortalNexusTeleport;
import com.neck_flexed.scripts.common.SlayerTask;
import com.neck_flexed.scripts.common.items;
import com.neck_flexed.scripts.common.traverse.*;
import com.neck_flexed.scripts.slayer.encounters.EncounterOverride;
import com.neck_flexed.scripts.slayer.encounters.NechryarchEncounter;
import com.neck_flexed.scripts.slayer.traverse.FremSlayerDungeonOverride;
import com.neck_flexed.scripts.slayer.traverse.KalphiteCaveTraverseOverride;
import com.neck_flexed.scripts.slayer.traverse.SlayerTowerBasementTraverseOverride;
import com.neck_flexed.scripts.slayer.turael.TuraelMonster;
import com.runemate.game.api.hybrid.Environment;
import com.runemate.game.api.hybrid.local.Rune;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.osrs.local.hud.interfaces.Magic;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import org.jetbrains.annotations.Nullable;

import java.util.Arrays;
import java.util.Optional;
import java.util.Set;

@RequiredArgsConstructor
@Getter
public class Monster implements SlayerMonster {

    @Setter
    private static com.neck_flexed.scripts.slayer.barrage.Monster DEBUG_BARRAGE_MONSTER = null;
    private static Set<Monster> monsters;
    @Setter
    private static @Nullable SlayerMonster DEBUG_MONSTER = null;
    private final Monsters monster;
    private final String monsterName;
    private final String[] superiorNames;
    private final String[] alternatives;
    private final int[] pathRegions;
    private final Area area;
    private final TraverseMethod[] traverseMethods;
    private final @Nullable TraverseOverride traverseOverride;
    private final @Nullable Coordinate traverseToTile;
    private final @Nullable Coordinate cannon;
    private final @Nullable Prayer prayer;
    private final @Nullable SlayerFinishItem finishItem;
    private final @Nullable SlayerProtectionItem protection;
    private final boolean isInSafeArea;
    private final boolean isLeafBladed;
    private final boolean isBarrageMonster;
    private final boolean needsFood;
    private final EncounterOverride superiorEncounter;
    private final boolean isDragon;
    private final boolean isPoisonous;
    private final int food;
    private final boolean hoppingDisabled;
    private final boolean isWyvern;
    private final BoneType boneType;

    public static Set<Monster> getMonsters() {
        if (Monster.monsters == null) {
            Monster.monsters = buildMonsters();
        }
        return Monster.monsters;
    }

    public static Optional<SlayerMonster> getByEnum(Monsters monster) {
        return getMonsters().stream()
                .filter(m -> m.getMonster().equals(monster))
                .map(m -> (SlayerMonster) m)
                .findFirst();
    }

    private static Set<Monster> buildMonsters() {
        return Set.of(
                new MonsterBuilder(Monsters.AberrantSpectres)
                        .setMonsterName("Aberrant spectres")
                        .setSuperiorNames("Abhorrent spectre", "Deviant spectre")
                        .setAlternatives("Aberrant spectre", "Deviant spectre")
                        .setPathRegions(Traverses.STRONGHOLD_REGIONS)
                        .setArea(areas.Spectres)
                        .setTraverseMethods(Traverses.NIEVE_CAVE)
                        .setPrayer(Prayer.PROTECT_FROM_MAGIC)
                        .build(),

                new MonsterBuilder(Monsters.AbyssalDemons)
                        .setMonsterName("Abyssal demons")
                        .setSuperiorNames("Greater abyssal demon")
                        .setAlternatives("Abyssal demon", "Abyssal sire")
                        .setPathRegions(Traverses.CATACOMBS_REGIONS)
                        .setArea(areas.AbyssalDemons)
                        .setTraverseMethods(Traverses.CATACOMBS_TRAVERSES)
                        .setTraverseToTile(new Coordinate(1674, 10089, 0))
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .setIsBarrageMonster(true)
                        .setBoneType(BoneType.Ashes)
                        .build(),

                new MonsterBuilder(Monsters.AdamantDragons)
                        .setMonsterName("Adamant dragons")
                        .setAlternatives("Adamant dragon")
                        .setPathRegions(Traverses.LITHRIKEN_REGIONS)
                        .setTraverseMethods(Traverses.LITHRIKEN_TRAVERSES)
                        .setTraverseOverride(new LithkrenOverride(LithkrenOverride.Dragon.Adamant))
                        .setArea(areas.AdamantDragons)
                        .setPrayer(Prayer.PROTECT_FROM_MAGIC)
                        .setNeedsFood(true)
                        .setFood(0)
                        .setDragon()
                        .setPoisonous()
                        .disableHopping()
                        .build(),

                new MonsterBuilder(Monsters.Ankou)
                        .setMonsterName("Ankou")
                        .setAlternatives("Ankou", "Dark Ankou")
                        .setPathRegions(Traverses.CATACOMBS_REGIONS)
                        .setArea(areas.Ankou)
                        .setTraverseMethods(Traverses.CATACOMBS_TRAVERSES)
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .build(),
                //    Aviansies("Aviansies",
//            new String[]{"Aviansie","Kree'arra","Flight Kilisa","Flockleader Geerin","Wingman Skree","Reanimated aviansie"},
//            ),
//    Basilisks("Basilisks",
//            new String[]{"Basilisk", "Basilisk Knight"},
//            ),
                new MonsterBuilder(Monsters.BlackDemons)
                        .setMonsterName("Black demons")
                        .setAlternatives("Black demon", "Demonic gorilla", "Balfrug Kreeyath", "Porazdir", "Skotizo")
                        .setPathRegions(Traverses.CATACOMBS_REGIONS)
                        .setArea(areas.BlackDemon)
                        .setTraverseMethods(Traverses.CATACOMBS_TRAVERSES)
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .setBoneType(BoneType.Ashes)
                        .build(),
                new MonsterBuilder(Monsters.BlackDragons)
                        .setMonsterName("Black dragons")
                        .setAlternatives("Black dragon", "Baby black dragon", "King Black Dragon", "Brutal black dragon")
                        .setPathRegions(Traverses.TAVERLY_DUNGEON_REGIONS)
                        .setArea(areas.BabyBlackDragon)
                        .setBoneType(BoneType.Bones)
                        .setTraverseToTile(new Coordinate(2862, 9827, 1))
                        .setTraverseMethods(Traverses.TAVERLY_DUNGEON)
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .build(),

                new MonsterBuilder(Monsters.Bloodveld)
                        .setMonsterName("Bloodveld")
                        .setSuperiorNames("Insatiable Bloodveld", "Insatiable mutated Bloodveld")
                        .setAlternatives("Bloodveld", "Mutated Bloodveld", "Reanimated Bloodveld")
                        .setPathRegions(Traverses.CATACOMBS_REGIONS)
                        .setArea(areas.Bloodveld)
                        .setBoneType(BoneType.Ashes)
                        .setTraverseMethods(Traverses.CATACOMBS_TRAVERSES)
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .build(),

                new MonsterBuilder(Monsters.BlueDragons)
                        .setMonsterName("Blue dragons")
                        .setAlternatives("Blue dragon", "Baby blue dragon", "Brutal blue dragon")
                        .setPathRegions(Traverses.TAVERLY_DUNGEON_REGIONS)
                        .setArea(areas.BabyBlueDragon)
                        .setBoneType(BoneType.Bones)
                        .setTraverseToTile(new Coordinate(2896, 9769, 0))
                        .setTraverseMethods(Traverses.TAVERLY_DUNGEON)
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .build(),
//    CaveHorrors("Cave horrors",
//            new String[]{"Cave abomination"},
//            new String[]{"Cave horror"},
//            ),
//    CaveKraken("Cave kraken",
//            new String[]{"Cave kraken", "Kraken"},
//            ),
                new MonsterBuilder(Monsters.Dagannoth)
                        .setMonsterName("Dagannoth")
                        .setAlternatives("Dagannoth", "Dagannoth spawn", "Dagannoth fledgeling", "Reanimated dagannoth")
                        .setPathRegions(Traverses.CATACOMBS_REGIONS)
                        .setArea(areas.Dagannoth)
                        .setBoneType(BoneType.Bones)
                        .setTraverseMethods(Traverses.CATACOMBS_TRAVERSES)
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .build(),
                //    DarkBeasts("Dark beasts",
//            new String[]{"Dark beast",},
//            ),
//    Drakes("Drakes",
//            new String[]{"Drake",},
//            ),
                new MonsterBuilder(Monsters.DustDevils)
                        .setMonsterName("Dust devils")
                        .setSuperiorNames("Choke devil")
                        .setAlternatives("Dust devil")
                        .setPathRegions(Traverses.CATACOMBS_REGIONS)
                        .setArea(areas.DustDevil)
                        .setBoneType(BoneType.Bones)
                        .setTraverseMethods(Traverses.CATACOMBS_TRAVERSES)
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .setIsBarrageMonster(true)
                        .build(),
                //    Elves("Elves",
//            new String[]{"Elf", "Elf warrior", "Reanimated elf", "Iorwerth Warrior"},
//            ),
                new MonsterBuilder(Monsters.FireGiants)
                        .setMonsterName("Fire giants")
                        .setAlternatives("Fire giant")
                        .setPathRegions(Traverses.CATACOMBS_REGIONS)
                        .setArea(areas.FireGiant)
                        .setBoneType(BoneType.Bones)
                        .setTraverseMethods(Traverses.CATACOMBS_TRAVERSES)
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .build(),

                new MonsterBuilder(Monsters.FossilIslandWyverns)
                        .setMonsterName("Fossil Island Wyverns")
                        .setAlternatives("Fossil Island Wyvern", "Spitting wyvern", "Taloned wyvern", "Long-tailed wyvern", "Ancient Wyvern")
                        .setPathRegions(14908, 14652, 14496)
                        .setTraverseMethods(new DigsitePendantTraverse(DigsiteDestination.HouseOnHill), new HouseDigsiteTraverse(DigsiteDestination.HouseOnHill))
                        .setTraverseOverride(new FossilIslandWyvernOverride())
                        .setArea(areas.FossilWyverns)
                        .setWyvern()
                        .setNeedsFood(true)
                        .setFood(0)
                        .disableHopping()
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .build(),

                new MonsterBuilder(Monsters.Gargoyles)
                        .setMonsterName("Gargoyles")
                        .setAlternatives("Gargoyle")
                        .setSuperiorNames("Marble gargoyle")
                        .setArea(areas.Gargoyle)
                        .setTraverseToTile(new Coordinate(3417, 3536, 0))
                        .setPathRegions(Traverses.SLAYER_TOWER_REGIONS)
                        .setTraverseOverride(new SlayerTowerBasementTraverseOverride(new Coordinate(3430, 9945, 3)))
                        .setTraverseMethods(Traverses.SLAYER_TOWER)
                        .setFinishItem(SlayerFinishItem.RockHammer)
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .setNeedsFood(true)
                        .build(),

                new MonsterBuilder(Monsters.GreaterDemons)
                        .setMonsterName("Greater demons")
                        .setAlternatives("Greater demon")
                        .setPathRegions(Traverses.CATACOMBS_REGIONS)
                        .setArea(areas.GreaterDemon)
                        .setTraverseMethods(Traverses.CATACOMBS_TRAVERSES)
                        .setBoneType(BoneType.Ashes)
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .build(),
                new MonsterBuilder(Monsters.Hellhounds)
                        .setMonsterName("Hellhounds")
                        .setAlternatives("Hellhound", "Cerberus", "Skeleton Hellhound", "Greater Skeleton Hellhound")
                        .setPathRegions(Traverses.CATACOMBS_REGIONS)
                        .setArea(areas.Hellhound)
                        .setBoneType(BoneType.Ashes)
                        .setTraverseMethods(Traverses.CATACOMBS_TRAVERSES)
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .build(),

                new MonsterBuilder(Monsters.IronDragons)
                        .setMonsterName("Iron dragons")
                        .setAlternatives("Iron dragon")
                        .setArea(areas.IronDragons)
                        .setTraverseToTile(new Coordinate(1662, 10086, 0))
                        .setPathRegions(Traverses.CATACOMBS_REGIONS)
                        .setTraverseMethods(Traverses.CATACOMBS_TRAVERSES)
                        .setPrayer(Prayer.PROTECT_FROM_MAGIC)
                        .setDragon()
                        .setFood(0)
                        .setNeedsFood(true)
                        .build(),

                new MonsterBuilder(Monsters.Kalphites)
                        .setMonsterName("Kalphites")
                        .setAlternatives("Kalphites", "Kalphite", "Kalphite Worker", "Kalphite Soldier")
                        .setPathRegions(12848, 13104, 13204)
                        .setArea(areas.Kalphites)
                        .setTraverseOverride(new KalphiteCaveTraverseOverride())
                        .setTraverseMethods(new ItemTraverse(items.desertAmulet4, "Kalphite cave"), new FairyRingTraverse(FairyRing.BIQ))
                        .setCannon(new Coordinate(3323, 9502, 0))
                        .setIsInSafeArea(true)
                        .build(),
                new MonsterBuilder(Monsters.Kalphites_Lair)
                        .setMonsterName("Kalphites_Lair")
                        .setAlternatives("Kalphites", "Kalphite", "Kalphite Worker")
                        .setPathRegions(KalphiteLairTraverse.LAIR_REGION_ID)
                        .setArea(areas.Kalphites_Lair)
                        .setTraverseMethods(new KalphiteLairTraverse())
                        .setCannon(new Coordinate(3501, 9522, 2))
                        .setIsInSafeArea(true)
                        .build(),
                new MonsterBuilder(Monsters.Kurask)
                        .setMonsterName("Kurask")
                        .setSuperiorNames("King kurask")
                        .setAlternatives("Kurask")
                        .setPathRegions(Traverses.FREM_SLAYER_REGIONS)
                        .setArea(areas.Kurask)
                        .setTraverseMethods(Traverses.FREM_SLAYER_TRAVERSES)
                        .setTraverseOverride(new FremSlayerDungeonOverride())
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .setIsLeafBladed(true)
                        .build(),
                //    Lizardmen("Lizardmen",
//            new String[]{"Lizardmen", "Lizardman brute", "Lizardman shaman"},
//            ),
                //    MinionsOfScabaras("Minions of Scabaras",
//            new String[]{"Minions of Scabaras","Scarab","Scarab swarm","Locust rider","Scarab mage"},
//            ),
//    MithrilDragons("Mithril dragons",
//            new String[]{"Mithril dragon",},
//            ),
//    MutatedZygomites("Mutated Zygomites",
//            new String[]{"Mutated Zygomite", "Ancient Zygomite"},
//            ),
                new MonsterBuilder(Monsters.Nechryael)
                        .setMonsterName("Nechryael")
                        .setSuperiorNames("Nechryarch")
                        .setAlternatives("Nechryael", "Greater Nechryael")
                        .setPathRegions(Traverses.CATACOMBS_REGIONS)
                        .setArea(areas.Nechryael)
                        .setBoneType(BoneType.Ashes)
                        .setTraverseMethods(Traverses.CATACOMBS_TRAVERSES)
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .setSuperiorEncounter(new NechryarchEncounter())
                        .setIsBarrageMonster(true)
                        .setNeedsFood(true)
                        .build(),
                //    RedDragons("Red dragons",
//            new String[]{"Red dragon","Baby red dragon","brutal red dragon"},
//            ),

                new MonsterBuilder(Monsters.RuneDragons)
                        .setMonsterName("Rune dragons")
                        .setAlternatives("Rune dragon")
                        .setPathRegions(Traverses.LITHRIKEN_REGIONS)
                        .setTraverseMethods(Traverses.LITHRIKEN_TRAVERSES)
                        .setTraverseOverride(new LithkrenOverride(LithkrenOverride.Dragon.Rune))
                        .setArea(areas.RuneDragons)
                        .setPrayer(Prayer.PROTECT_FROM_MAGIC)
                        .setNeedsFood(true)
                        .setFood(0)
                        .setProtection(SlayerProtectionItem.InsulatedBoots)
                        .setDragon()
                        .disableHopping()
                        .build(),

//    SkeletalWyverns("Skeletal Wyverns",
//            new String[]{"Skeletal Wyvern",},
//            ),
//    SmokeDevils("Smoke devils",
//            new String[]{"Smoke devil", "Thermonuclear smoke devil"},
//            ),
                //    SpiritualCreatures("Spiritual creatures",
//            new String[]{"Spiritual creature","Spiritual ranger","Spiritual warrior","Spiritual mage"},
//            ),

                new MonsterBuilder(Monsters.SteelDragons)
                        .setMonsterName("Steel dragons")
                        .setAlternatives("Steel dragon")
                        .setArea(areas.SteelDragons)
                        .setTraverseToTile(new Coordinate(1608, 10055, 0))
                        .setPathRegions(Traverses.CATACOMBS_REGIONS)
                        .setTraverseMethods(Traverses.CATACOMBS_TRAVERSES)
                        .setPrayer(Prayer.PROTECT_FROM_MAGIC)
                        .setDragon()
                        .setFood(0)
                        .setNeedsFood(true)
                        .build(),

                new MonsterBuilder(Monsters.Suqah)
                        .setMonsterName("Suqahs")
                        .setAlternatives("Suqah")
                        .setPathRegions(8253, 8509, 8252, 8508)
                        .setArea(areas.Suqah)
                        .setTraverseMethods(new HousePortalTraverse(PortalNexusTeleport.LunarIsle), new TeleportTraverse(Magic.Lunar.MOONCLAN_TELEPORT, 69, Rune.EARTH, Rune.ASTRAL, Rune.LAW))
                        .setPrayer(Prayer.PROTECT_FROM_MAGIC)
                        .setCannon(new Coordinate(2119, 3943, 0))
                        .setNeedsFood(true)
                        .build(),
                new MonsterBuilder(Monsters.Trolls)
                        .setMonsterName("Trolls")
                        .setAlternatives("Troll", "Mountain troll", "Ice troll", "Ice troll female", "Ice troll runt", "Ice troll male", "Reanimated troll")
                        .setPathRegions(4918, 5174, 4919)
                        .setArea(areas.Troll)
                        .setTraverseMethods(
                                //new XericTraverse(Xeric.Honour)
                                //new X
                                new FairyRingTraverse(FairyRing.BLS)
                        )
                        .setCannon(new Coordinate(1238, 3519, 0))
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .build(),
//                new MonsterBuilder(Monsters.Trolls_Ice)
//                        .setMonsterName("Trolls")
//                        .setAlternatives("Troll", "Mountain troll", "Ice troll", "Ice troll female", "Ice troll runt", "Ice troll male", "Reanimated troll")
//                        .setPathRegions(9531, 9532, 10553, 10297, 10809, 10552, 10808, 11064)
//                        .setArea(areas.IceTroll)
//                        .setTraverseMethods(
//                                // TODO
//                                //new ItemTraverse("Enchanted Lyre", "TODO"),
//                                //new ItemTraverse("Frem Boots", "TODO"),
//                                new ConstructionCapeTraverse(ConstructionCapeTraverse.DigsiteDestination.Rellekka),
//                                new HouseLocationTraverse(House.Location.RELLEKKA),
//                                new FairyRingTraverse(FairyRing.AJR)
//                        )
//                        .setCannon(new Coordinate(0, 0, 0))
//                        .setPrayer(Prayer.PROTECT_FROM_MISSILES)
//                        .build(),
                new MonsterBuilder(Monsters.Turoth)
                        .setMonsterName("Turoth")
                        .setSuperiorNames("Spiked Turoth")
                        .setAlternatives("Turoth")
                        .setPathRegions(Traverses.FREM_SLAYER_REGIONS)
                        .setArea(areas.Turoth)
                        .setTraverseMethods(Traverses.FREM_SLAYER_TRAVERSES)
                        .setTraverseOverride(new FremSlayerDungeonOverride())
                        .setPrayer(Prayer.PROTECT_FROM_MELEE)
                        .setIsLeafBladed(true)
                        .build()
                //    TzHaar("TzHaar",
//            new String[]{"TzHaar"},
//            ),
//    Vampyres("Vampyres",
//            new String[]{"Vampyre","Feral Vampyre","Vampyre Juvinate","Vyrewatch","Vyrewatch Sentinel"},
//            ),
//    Waterfiends("Waterfiends",
//            new String[]{"Waterfiend"},
//            ),
//    Wyrms("Wyrms",
//            new String[]{"Wyrms"},
//            ),

        );
    }

    static Optional<SlayerMonster> fromSlayerTaskFallbackToTurael() {
        var m = Monster.fromSlayerTask();
        if (m.isPresent()) return m;
        return TuraelMonster.fromSlayerTask();
    }

    static Optional<SlayerMonster> fromSlayerTask() {
        if (Monster.DEBUG_MONSTER != null && Environment.isDevMode()) {
            return Optional.of(Monster.DEBUG_MONSTER);
        }

        var task = SlayerTask.getCurrent();
        if (task == null) return Optional.empty();
        if (task.equalsIgnoreCase("Kalphite")) {
            if (SlayerTask.getLocation() == null)
                return getByEnum(Monsters.Kalphites);
            if (SlayerTask.getLocation().equalsIgnoreCase("kalphite lair")) {
                return getByEnum(Monsters.Kalphites_Lair);
            }
            return getByEnum(Monsters.Kalphites);
        }
        return getMonsters().stream()
                .filter(m -> Arrays.stream(m.getAllNames()).anyMatch(n -> n.equalsIgnoreCase(task)))
                .map(m -> (SlayerMonster) m)
                .findFirst();
    }

    public static Optional<com.neck_flexed.scripts.slayer.barrage.Monster> barrageFromSlayerTask() {
        if (DEBUG_BARRAGE_MONSTER != null && Environment.isDevMode()) {
            return Optional.of(DEBUG_BARRAGE_MONSTER);
        }
        var monsterOpt = fromSlayerTask();
        if (monsterOpt.isEmpty()) return Optional.empty();

        var monster = (Monster) monsterOpt.get();

        switch (monster.getMonster()) {
            case DustDevils:
                return Optional.of(com.neck_flexed.scripts.slayer.barrage.Monster.DustDevil);
            case Nechryael:
                return Optional.of(com.neck_flexed.scripts.slayer.barrage.Monster.Nechryael);
            case AbyssalDemons:
                return Optional.of(com.neck_flexed.scripts.slayer.barrage.Monster.AbyssalDemon);
        }
        return Optional.empty();
    }

    @Override
    public boolean needsFood() {
        return this.needsFood;
    }

    @Override
    public boolean needsLightSource() {
        return false;
    }

    @Override
    public String toString() {
        return this.monsterName;
    }

    public Coordinate getTraverseToTile() {
        if (this.traverseToTile != null) return traverseToTile;
        return SlayerMonster.super.getTraverseToTile();
    }
}
