package com.neck_flexed.scripts.lizard;

import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.input.direct.MenuAction;
import com.runemate.game.api.hybrid.local.Skill;
import com.runemate.game.api.hybrid.local.hud.interfaces.Health;
import com.runemate.game.api.hybrid.local.hud.interfaces.Inventory;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import com.runemate.game.api.script.framework.listeners.EngineListener;
import com.runemate.game.api.script.framework.listeners.PlayerListener;
import com.runemate.game.api.script.framework.listeners.events.HitsplatEvent;
import lombok.extern.log4j.Log4j2;

import java.util.Arrays;
import java.util.List;

@Log4j2(topic = "Consumeables")
public class Consumeables implements PlayerListener, EngineListener {

    private static List<Integer> boosts = Arrays.asList(
            23742,
            23739,
            23736,
            23733,
            173,
            171,
            169,
            2444);

    private static List<Integer> prayerRestores = Arrays.asList(
            139//3 dose prayer
    );

    private static boolean consume(int itemId, String action, int attackTickDelay) {
        try {
            var si = Inventory.getItems(itemId).first();
            if (si != null) {
                log.debug(String.format("consuming: %s", si.getDefinition().getName()));
                DirectInput.send(MenuAction.forSpriteItem(si, action));
                BotState.addToTicksUntilAttack(attackTickDelay);
                BotState.setLastAction(Action.Consume);
                return true;
            }
        } catch (Exception e) {
            log.error(e);
            e.printStackTrace();
        }
        return false;
    }

    private static boolean consume(String itemName, String action, int attackTickDelay) {
        var si = Inventory.getItems(itemName).first();
        if (si == null) return false;
        return consume(si.getId(), action, attackTickDelay);
    }

    public static boolean restoreHitpoints() {
        String food1 = "Chilli potato";
        if (consume(food1, "Eat", 3)) {
            return true;
        }
        String food = "Manta ray";
        if (consume(food, "Eat", 3)) {
            return true;
        }
        return false;
    }

    @Override
    public void onPlayerHitsplat(HitsplatEvent event) {
        if (Health.getCurrentPercent() < 45) {
            if (!restoreHitpoints()) {
                BotState.setBotState(BotState.RESTORING);
            }
        }
    }

    @Override
    public void onTickStart() {
        if (Health.getCurrentPercent() < 45) {
            if (!restoreHitpoints()) {
                BotState.setBotState(BotState.RESTORING);
            }
        }
        int boostThresh = 5;
        var boost = Skill.RANGED.getCurrentLevel() - Skill.RANGED.getBaseLevel();
        if (boost < boostThresh) {
            consumeRangedBoost();
        }
        if (Prayer.getPoints() < 5) {
            if (!restorePrayer()) {
                BotState.setBotState(BotState.RESTORING);
            }
        }
        if (Health.isPoisoned()) {
            if (consume(5958, "Drink", 0)) {
            } else if (consume(5956, "Drink", 0)) {
            } else if (consume(5954, "Drink", 0)) {
            } else if (consume(5952, "Drink", 0)) {
            } else if (consume("Superantipoison.*", "Drink", 0)) {
            } else if (consume("Antipoison.*", "Drink", 0)) {
            } else {
                BotState.setBotState(BotState.RESTORING);
            }
        }

    }

    private boolean restorePrayer() {
        for (Integer b :
                prayerRestores) {
            if (consume(b, "Drink", 0)) {
                return true;
            }
        }
        return false;
    }

    private boolean consumeRangedBoost() {
        for (Integer b :
                boosts) {
            if (consume(b, "Drink", 0)) {
                return true;
            }
        }
        return false;
    }
}
