package com.neck_flexed.scripts.cerberus;

import com.neck_flexed.scripts.common.*;
import com.neck_flexed.scripts.common.loadout.Loadout;
import com.neck_flexed.scripts.common.loadout.Loadouts;
import com.neck_flexed.scripts.common.state.BaseState;
import com.runemate.game.api.hybrid.entities.SpotAnimation;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.queries.results.LocatableEntityQueryResults;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.hybrid.region.SpotAnimations;
import com.runemate.game.api.osrs.local.SpecialAttack;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import com.runemate.game.api.script.framework.listeners.EngineListener;
import lombok.extern.log4j.Log4j2;

import java.util.*;

@Log4j2(topic = "FightState2")
public class FightState2 extends BaseState<CerbState> implements EngineListener {
    private final CerbListener cerbListener;
    private final PrayerFlicker prayerFlicker;
    private final cerb bot;

    private final Loadouts loadouts;
    private final WildPieListener wildPieListener;
    private Prayer[] boostPrayers;
    private CombatStyle combatStyle;
    private Loadout spec;
    private Coordinate best;
    private long lastMove = 0;

    public FightState2(CerbListener cerbListener,
                       PrayerFlicker prayerFlicker,
                       cerb bot
    ) {
        super(bot, CerbState.FIGHTING);
        this.cerbListener = cerbListener;
        this.prayerFlicker = prayerFlicker;
        this.bot = bot;
        this.loadouts = bot.loadouts;
        this.combatStyle = this.loadouts.getEquipped().getStyle();
        this.boostPrayers = util.getBoostPrayersA(combatStyle);
        this.spec = this.loadouts.getSpecLoadout();

        this.wildPieListener = new WildPieListener(bot, CerbState.RESTORING, 91);

    }

    private static void initMove(Coordinate c) {
        var p = Players.getLocal();
        if (p == null) return;
        if (!p.isMoving() && !p.getServerPosition().equals(c)) {
            util.moveTo(c);
        }
    }

    @Override
    public void deactivate() {
        log.debug("deactivate");
        this.prayerFlicker.disable();
    }

    private LocatableEntityQueryResults<SpotAnimation> getLavas() {
        return SpotAnimations
                .newQuery()
                .ids(1246)
                .results();
    }

    @Override
    public void onTickStart() {
        log.debug("Tick");
        var p = Players.getLocal();
        if (p == null) return;
        try {
            var dog = this.cerbListener.getCerberus();
            util.boostIfNeeded(this.combatStyle, bot.settings().reboost());
            var startTile = this.combatStyle.equals(CombatStyle.Melee)
                    ? cerb.centerSpawnTile
                    : cerb.rangingStartTile;
            if (dog == null) {
                initMove(startTile);
                return;
            }
            var npc = dog.getNpc();
            if (npc == null) return;
            if (npc.getId() == cerb.IdStartNoAttack) {
                initMove(startTile);
                return;
            }

            if (cerbListener.getGhosts().size() > 0) {
                var ghostLoadout = loadouts.getForName("Ghost");
                if (ghostLoadout != null)
                    loadouts.equip(ghostLoadout);
                var pp = ghostLoadout != null && ghostLoadout.isHasSpectral() ? 10 : 15;

                if (Prayer.getPoints() < 3 * pp + 1) {
                    util.restorePrayer();
                }
            }

            if (this.spec != null && SpecialAttack.getEnergy() >= this.spec.getSpecEnergy() && dog.getHp() > 400) {
                loadouts.equip(spec);
                util.activateSpec();
            } else if (cerbListener.getGhosts().size() == 0 || loadouts.getForName("Ghost") == null) {
                loadouts.equip(loadouts.getForName(CombatStyle.Melee));
            }
            var target = p.getTarget();
            if (target == null && (this.best == null || p.getServerPosition().equals(best))) {
                bot.attack();
            }


            var lavas = getLavas();
            if (!lavas.isEmpty()) {
                var moovables = this.combatStyle.equals(CombatStyle.Melee)
                        ? getMeleeCoordinates(npc.getArea())
                        : npc.getArea().grow(1, 1).getSurroundingCoordinates();
                this.best = moovables.stream()
                        .filter(c -> lavas.stream().noneMatch(l -> l.getArea().grow(1, 1).contains(c)))
                        .min(Comparator.comparingDouble(c -> c.distanceTo(p))).orElse(null);
                log.debug("lava move to: {}", best);
                if (this.best != null && !p.getServerPosition().equals(best) && !p.isMoving()) {
                    if (System.currentTimeMillis() - lastMove > 500) {
                        util.moveTo(best);
                        lastMove = System.currentTimeMillis();
                    }
                }
            } else {
                this.best = null;
                if (Objects.equals(dog.getNextExpectedPhase(), Phase.LAVA)) {
                    log.debug("Lava coming up");
                    var moovables = this.combatStyle.equals(CombatStyle.Melee)
                            ? getMeleeCoordinates(npc.getArea())
                            : npc.getArea().grow(1, 1).getSurroundingCoordinates();
                    this.best = moovables.stream()
                            .filter(c -> c.distanceTo(p.getServerPosition()) >= 2)
                            .min(Comparator.comparingDouble(c -> c.distanceTo(p))).orElse(null);
                    if (best != null && System.currentTimeMillis() - lastMove > 500) {
                        util.moveTo(best);
                        lastMove = System.currentTimeMillis();
                    }
                }
            }

        } catch (Exception e) {
            log.error("Fight state 2", e);
            e.printStackTrace();
        }

    }

    private List<Coordinate> getMeleeCoordinates(Area a) {
        if (a == null) return new ArrayList<>();
        var rect = a.toRectangular();
        var melees = rect.getSurroundingCoordinates();
        melees.remove(rect.getTopLeft());
        melees.remove(rect.getTopRight());
        melees.remove(rect.getBottomLeft());
        melees.remove(rect.getBottomRight());
        return melees;
    }

    @Override
    public EventListener[] getEventListeners() {
        var l = new ArrayList<EventListener>();
        l.add(this);
        if (this.bot.settings().wildPieCount() > 0)
            l.add(wildPieListener);
        return l.toArray(new EventListener[0]);
    }

    @Override
    public void activate() {
        bot.updateStatus("Fighting");
        Action.set(Action.None);
        this.prayerFlicker.setActivePrayers(util.joinPrayers(this.boostPrayers, Prayer.PROTECT_FROM_MAGIC));
    }

    @Override
    public String fatalError() {
        return null;
    }

    @Override
    public boolean done() {
        return this.cerbListener.isDead();
    }

    @Override
    public void executeLoop() {
        this.prayerFlicker.setActivePrayers(util.joinPrayers(this.boostPrayers, this.cerbListener.getBestProtectionPrayer()));
        if (cerbListener.getCerberus() == null && !this.cerbListener.isDead())
            cerbListener.init();
    }
}
