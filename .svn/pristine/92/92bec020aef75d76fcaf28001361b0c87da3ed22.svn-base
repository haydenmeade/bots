package com.neck_flexed.scripts.cerberus;

import com.neck_flexed.scripts.common.LoopState;
import com.neck_flexed.scripts.common.PrayerFlicker;
import com.neck_flexed.scripts.common.items;
import com.neck_flexed.scripts.common.util;
import com.runemate.game.api.client.ClientUI;
import com.runemate.game.api.hybrid.entities.GameObject;
import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.input.direct.MenuAction;
import com.runemate.game.api.hybrid.local.House;
import com.runemate.game.api.hybrid.local.hud.interfaces.Inventory;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.location.navigation.Path;
import com.runemate.game.api.hybrid.location.navigation.basic.BresenhamPath;
import com.runemate.game.api.hybrid.region.GameObjects;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.hybrid.web.WebPath;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import com.runemate.game.api.script.Execution;
import com.runemate.game.api.script.framework.core.EventDispatcher;
import lombok.extern.log4j.Log4j2;

@Log4j2(topic = "TraverseState")
public class TraverseState implements LoopState<CerbState> {
    private static final Coordinate destTile = new Coordinate(1292, 1253, 0);
    private static final Area dangerArea =
            new Area.Rectangular(new Coordinate(2862, 9853, 0), new Coordinate(2878, 9810, 0));
    private final cerb bot;
    private final PrayerFlicker prayerFlicker;
    private String error;
    private WebPath path;
    private Path path2;

    public TraverseState(cerb bot, PrayerFlicker prayerFlicker) {
        this.bot = bot;
        this.prayerFlicker = prayerFlicker;
    }

    @Override
    public void activate(EventDispatcher d) {
        bot.updateStatus("Traversing");
    }

    @Override
    public CerbState deactivate(EventDispatcher d) {
        if (cerb.atLairEntrance() || (cerb.isInBossRoomIncludingEntrance() && !cerb.isInBossRoom())) {
            prayerFlicker.setActivePrayers();
            return CerbState.ENTERING_LAIR;
        } else if (cerb.isInBossRoom()) {
            return CerbState.FIGHTING;
        }
        return CerbState.STARTING;
    }

    @Override
    public CerbState get() {
        return CerbState.TRAVERSING;
    }

    @Override
    public String fatalError() {
        return error;
    }

    @Override
    public boolean done() {
        return destTile.equals(Players.getLocal().getPosition())
                || cerb.isInBossRoom()
                || cerb.isInBossRoomIncludingEntrance()
                || cerb.atLairEntrance();
    }

    private GameObject getCave() {
        return GameObjects.newQuery()
                .on(new Coordinate(2874, 9846, 0))
                .names("Cave")
                .actions("Crawl")
                .results()
                .first();
    }

    @Override
    public void executeLoop() {
        // traverse from bank to cerb room entrance.
        if (House.isInside() && House.getCurrent() != House.Location.TAVERLEY) {
            ClientUI.showAlert(ClientUI.AlertLevel.WARN, "Requires house in taverly");
            bot.pause();
            return;
        }
        if (House.isInside() && House.getCurrent() == House.Location.TAVERLEY) {
            var portal = House.getPortals().nearest();
            if (portal != null) {
                portal.interact("Enter");
                Execution.delayUntil(cerb::isAboveGround, 5000, 6000);
            }
        }

        if (!cerb.isAboveGround()
                && !cerb.isInBossRoomIncludingEntrance()
                && !cerb.atLairEntrance()
                && !cerb.inCerbDungeonArea()
                && !cerb.inTaverlyDungeon()) {
            if (bot.settings().traverseStrategy().equals(TraverseStrategy.TaverlyHouse) && !House.isInside()) {
                util.teleToHouse();
                Execution.delayUntil(House::isInside, 5000, 6000);
                return;
            } else if (bot.settings().traverseStrategy().equals(TraverseStrategy.KeyMasterTeleport)) {
                var kmt = Inventory.getItems(items.keyMasterTeleport).first();
                if (kmt == null) {
                    bot.updateStatus("No key master teleports");
                    bot.pause();
                    return;
                }
                kmt.interact("Teleport");
                Execution.delayUntil(cerb::inCerbDungeonArea, 5000, 6000);
                return;
            }
        }
        if (dangerArea.contains(Players.getLocal())) {
            prayerFlicker.setActivePrayers(Prayer.PROTECT_FROM_MELEE);
            var c = getCave();
            if (c != null) {
                DirectInput.send(MenuAction.forGameObject(c, "Crawl"));
                Execution.delayWhile(() -> dangerArea.contains(Players.getLocal()), 5000, 6000);
            } else {
                if (this.path2 == null) {
                    path2 = BresenhamPath.buildTo(new Coordinate(2874, 9846, 0));
                }
                if (path2 != null) {
                    path2.step();
                } else {
                    log.error("Could not generate path to cerb lair2");
                }
            }
        } else {
            prayerFlicker.setActivePrayers();
            if (path == null)
                this.path = WebPath.buildTo(destTile);
            var isGameObjStep = path != null && path.getNext() instanceof GameObject;
            if (path == null || !path.step() || isGameObjStep) {
                path = null;
            } else {
                log.error("Could not generate path to cerb lair");
            }
        }
    }
}
