package com.neck_flexed.scripts.common;

import com.runemate.game.api.hybrid.EquipmentLoadout;
import com.runemate.game.api.hybrid.entities.GameObject;
import com.runemate.game.api.hybrid.entities.GroundItem;
import com.runemate.game.api.hybrid.input.Keyboard;
import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.input.direct.MenuAction;
import com.runemate.game.api.hybrid.input.direct.MenuOpcode;
import com.runemate.game.api.hybrid.local.House;
import com.runemate.game.api.hybrid.local.Skill;
import com.runemate.game.api.hybrid.local.VarpID;
import com.runemate.game.api.hybrid.local.Varps;
import com.runemate.game.api.hybrid.local.hud.interfaces.*;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.location.navigation.basic.BresenhamPath;
import com.runemate.game.api.hybrid.queries.GameObjectQueryBuilder;
import com.runemate.game.api.hybrid.queries.results.LocatableEntityQueryResults;
import com.runemate.game.api.hybrid.region.GameObjects;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.osrs.local.SpecialAttack;
import com.runemate.game.api.osrs.local.hud.interfaces.ControlPanelTab;
import com.runemate.game.api.osrs.local.hud.interfaces.Magic;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import com.runemate.game.api.script.Execution;
import com.runemate.game.api.script.framework.core.EventDispatcher;
import lombok.extern.log4j.Log4j2;

import java.util.*;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Log4j2(topic = "commonUtil")
public class util {
    /**
     * Number of slayer creatures remaining on the assigned task
     */
    public static final Area castleWars = Area.rectangular(new Coordinate(2433, 3099), new Coordinate(2447, 3080));
    public static final int SLAYER_TASK_SIZE = 394;
    public static final int RestoreAnimId = 7305;
    public static final int jb_interface_id = 590;
    public static final Area ferox = Area.rectangular(new Coordinate(3120, 3646), new Coordinate(3155, 3617));
    private static final Pattern TOGGLE_ACTION = Pattern.compile("^(Dea|A)ctivate$");

    public static boolean hasSlayerTask() {
        var v = Varps.getAt(SLAYER_TASK_SIZE);
        return v != null && v.getValue() > 0;
    }

    public static void activateSpec() {
        if (SpecialAttack.isActivated()) return;
        var component = (InterfaceComponent) Interfaces.newQuery().containers(new int[]{160}).types(
                        new InterfaceComponent.Type[]{InterfaceComponent.Type.CONTAINER}).
                actions(new String[]{"Use"}).
                names(new String[]{"Special Attack"}).
                grandchildren(false).results().first();
        if (component == null) {
            log.debug("no special attack component");
            return;
        }
        DirectInput.send(MenuAction.forInterfaceComponent(component, "Use"));
    }

    public static void equipDramen() {
        var item = Inventory.getItems(items.dramenStaff, items.lunarStaff).first();
        if (item != null)
            DirectInput.send(MenuAction.forSpriteItem(item, "Wield"));
        Execution.delay(1200, 1400);
    }

    public static void equip(EquipmentLoadout l) {
        if (l == null) {
            log.debug("null loadout");
            return;
        }
        for (EnumMap.Entry<Equipment.Slot, Pattern> a : l.entrySet()) {
            equip(a.getValue(), a.getKey());
            //Execution.delay(15, 35);
        }
    }

    public static void equip(Pattern p, Equipment.Slot s) {
        var item = Inventory.getItems(p).first();
        if (item != null) {
            if (s == Equipment.Slot.WEAPON || s == Equipment.Slot.SHIELD) {
                DirectInput.send(MenuAction.forSpriteItem(item, "Wield"));
            } else {
                DirectInput.send(MenuAction.forSpriteItem(item, "Wear"));
            }
        }
    }

    public static Pattern[] concatenate(Pattern[]... arrays) {
        return Stream.of(arrays)
                .flatMap(Stream::of)        // or, use `Arrays::stream`
                .toArray(Pattern[]::new);
    }

    public static <T> List<T> joinLists(List<T>... lists) {
        return Arrays.stream(lists).flatMap(Collection::stream).collect(Collectors.toList());
    }

    public static String[] concatenate(String[]... arrays) {
        return Stream.of(arrays)
                .flatMap(Stream::of)        // or, use `Arrays::stream`
                .toArray(String[]::new);
    }

    public static Pattern[] toItemList(EquipmentLoadout l) {
        Pattern ret[] = {};
        if (l == null) return ret;
        return l.entrySet().stream().map(e -> e.getValue()).toArray(Pattern[]::new);
    }

    public static Pattern[] toPatternArray(String[] strings) {
        return Arrays.stream(strings).map(s -> Pattern.compile(s)).toArray(Pattern[]::new);
    }

    public static List<Prayer> getBoostPrayers(CombatStyle style) {
        var l = new ArrayList<Prayer>();
        if (style == CombatStyle.Magic)
            l.add(getMagicBoostPrayer());
        else if (style == CombatStyle.Ranged)
            l.add(getRangedBoostPrayer());
        else {
            l.addAll(getMeleeBoostPrayers());
        }
        return l;

    }

    public static List<Prayer> getMeleeBoostPrayers() {
        var l = new ArrayList<Prayer>();
        if (Prayer.PIETY.isActivatable())
            l.add(Prayer.PIETY);
        else if (Prayer.CHIVALRY.isActivatable())
            l.add(Prayer.CHIVALRY);
        else {
            l.add(Prayer.STEEL_SKIN);
            l.add(Prayer.ULTIMATE_STRENGTH);
            l.add(Prayer.INCREDIBLE_REFLEXES);
        }
        return l;
    }

    public static Prayer getMagicBoostPrayer() {
        return Prayer.AUGURY.isActivatable() ? Prayer.AUGURY :
                Prayer.MYSTIC_MIGHT.isActivatable() ? Prayer.MYSTIC_MIGHT :
                        Prayer.MYSTIC_LORE;
    }

    public static Prayer getRangedBoostPrayer() {
        return Prayer.RIGOUR.isActivatable() ? Prayer.RIGOUR :
                Prayer.EAGLE_EYE.isActivatable() ? Prayer.EAGLE_EYE :
                        Prayer.HAWK_EYE;
    }

    public static void teleToHouse() {
        if (!House.isInside()) {
            log.debug("tele to house");
            if (!Magic.TELEPORT_TO_HOUSE.activate()) {
                log.debug("tele to house spell failed");
            }
            if (!Execution.delayUntil(() -> House.isInside(), 5000)) {
                log.debug("unable to tele to house");
            }
        }
    }

    public static LocatableEntityQueryResults<GameObject> getPools() {
        return (LocatableEntityQueryResults) GameObjects.newQuery().types(
                new GameObject.Type[]{GameObject.Type.PRIMARY}).names(new String[]{"Ornate pool of Rejuvenation"}).actions(new String[]{"Drink"}).results();
    }

    public static GameObject getFairyRing() {
        var f1 = FairyRing.getNearestObject();
        if (f1 != null) return f1;
        var fr = GameObjects.newQuery().types(
                GameObject.Type.PRIMARY).names("Fairy ring").results().nearest();
        if (fr != null) return fr;
        var f2 = GameObjects.newQuery().types(
                GameObject.Type.PRIMARY).names("Spirit tree & fairy ring").results().nearest();
        if (f2 != null) return f2;
        var f3 = GameObjects.newQuery().types(
                GameObject.Type.PRIMARY).actions("Zanaris").results().nearest();
        if (f3 != null) return f3;
        return null;
    }

    public static LocatableEntityQueryResults<GameObject> getJewelleryBox() {
        return GameObjects.newQuery().types(
                new GameObject.Type[]{GameObject.Type.PRIMARY}).names(new String[]{"Ornate Jewellery Box"}).actions(new String[]{"Teleport Menu"}).results();
    }


    public static boolean restoreStatsInHouse(EventDispatcher d) {
        log.debug("restoring stats in house");
        if (!Execution.delayUntil(() -> House.isInside(), 5000)) {
            log.error("not in house");
            return false;
        }
        if (!Execution.delayUntil(() -> !getPools().isEmpty(), 5000)) {
            log.error("unable to get pool");
            return false;
        }
        var pool = getPools().first();
        if (pool == null) {
            log.error("unable to get pool2");
            return false;
        }
        var l = new RestoreListener(d);
        DirectInput.send(MenuAction.forGameObject(pool, "Drink"));
        if (!Execution.delayUntil(() -> l.hasRestored(), 10000)) {
            log.error("unable to restore");
            l.stop();
            return false;
        }
        l.stop();
        return true;
    }

    public static boolean consume(int itemId, String action) {
        try {
            var si = Inventory.getItems(itemId).first();
            if (si != null) {
                log.debug(String.format("consuming: %s", si.getDefinition().getName()));
                var slot = si.getIndex();
                if (Inventory.getItemIn(slot) != null && Inventory.getItemIn(slot).getId() == si.getId()) {
                    log.debug(String.format("clicking: %s", Inventory.getItemIn(slot)));
                    Action.set(Action.Consume);
                    si.interact(action);
                    Execution.delay(10, 65);
                }
                return true;
            }
        } catch (Exception e) {
            log.error("Consume", e);
        }
        return false;
    }

    public static boolean consume(String itemName, String action) {
        var si = Inventory.getItems(itemName).first();
        if (si == null) return false;
        return consume(si.getId(), action);
    }

    public static boolean consume(Pattern itemName, String action) {
        var si = Inventory.getItems(itemName).first();
        if (si == null) return false;
        return consume(si.getId(), action);
    }

    public static boolean invigorateHeart() {
        for (String b :
                new String[]{items.imbuedHeart, items.saturatedHeart}) {
            if (consume(b, items.invigorate)) {
                return true;
            }
        }
        return false;
    }

    public static boolean boostMeleeIfNeeded() {
        int boostThresh = 10;
        var boost = Skill.STRENGTH.getCurrentLevel() - Skill.STRENGTH.getBaseLevel();
        if (boost < boostThresh) {
            return consumeMeleeBoost();
        }
        return false;
    }

    private static boolean consumeMeleeBoost() {
        for (Integer b :
                items.combatBoosts) {
            if (consume(b, "Drink")) {
                return true;
            }
        }
        return false;
    }

    public static boolean consumeAttackBoostIfNeeded() {
        int boostThresh = 10;
        var boost = Skill.ATTACK.getCurrentLevel() - Skill.ATTACK.getBaseLevel();
        if (boost < boostThresh) {
            return consumeAttackBoost();
        }
        return false;
    }

    public static boolean consumeDefenceBoostIfNeeded() {
        int boostThresh = 10;
        var boost = Skill.DEFENCE.getCurrentLevel() - Skill.DEFENCE.getBaseLevel();
        if (boost < boostThresh) {
            return consumeDefenceBoost();
        }
        return false;
    }

    public static boolean consumeStrengthBoostIfNeeded() {
        int boostThresh = 10;
        var boost = Skill.STRENGTH.getCurrentLevel() - Skill.STRENGTH.getBaseLevel();
        if (boost < boostThresh) {
            return consumeStrengthBoost();
        }
        return false;
    }

    private static boolean consumeAttackBoost() {
        for (Integer b :
                items.attackBoosts) {
            if (consume(b, "Drink")) {
                return true;
            }
        }
        return false;
    }

    private static boolean consumeDefenceBoost() {
        for (Integer b :
                items.defenceBoosts) {
            if (consume(b, "Drink")) {
                return true;
            }
        }
        return false;
    }

    private static boolean consumeStrengthBoost() {
        for (Integer b :
                items.strengthBoosts) {
            if (consume(b, "Drink")) {
                return true;
            }
        }
        return false;
    }

    public static boolean boostIfNeeded(CombatStyle c) {
        if (c == CombatStyle.Magic) {
            int boostThresh = 5;
            var boost = Skill.MAGIC.getCurrentLevel() - Skill.MAGIC.getBaseLevel();
            if (boost < boostThresh) {
                return invigorateHeart();
            }
        } else if (c == CombatStyle.Ranged) {
            int boostThresh = 5;
            var boost = Skill.RANGED.getCurrentLevel() - Skill.RANGED.getBaseLevel();
            if (boost < boostThresh) {
                return consumeRangedBoost();
            }
        } else if (c == CombatStyle.Melee) {
            var ss = consumeStrengthBoostIfNeeded() ||
                    consumeAttackBoostIfNeeded() ||
                    consumeDefenceBoostIfNeeded();
            if (ss) return true;
            int boostThresh = 10;
            var boost = Skill.STRENGTH.getCurrentLevel() - Skill.STRENGTH.getBaseLevel();
            if (boost < boostThresh) {
                return !consumeMeleeBoost();
            }
        }
        return false;
    }

    public static boolean consumeRangedBoost() {
        for (Integer b :
                items.rangedBoosts) {
            if (consume(b, "Drink")) {
                return true;
            }
        }
        return false;
    }

    public static boolean itemStacksAndInInvent(GroundItem gi) {
        if (gi == null || gi.getDefinition() == null) return false;
        var stacks = gi.getDefinition().stacks() || gi.getDefinition().isNoted();
        var invItem = Inventory.getItems(gi.getId()).first();
        var res = stacks &&
                Inventory.contains(gi.getId()) &&
                (invItem.getDefinition().stacks() || invItem.getDefinition().isNoted());
        return res;
    }

    public static void take(GroundItem gi) {
        if (gi == null || !gi.isValid()) {
            log.debug("null / invalid in take");
            return;
        }
        log.debug(String.format("looting: %s", gi.getDefinition().getName()));
        DirectInput.send(MenuAction.forGroundItem(gi, "Take"));
    }

    public static boolean isCannonNearby() {
        return false;
    }

    public static boolean restorePrayer() {
        for (Integer b :
                items.prayerRestores) {
            if (consume(b, "Drink")) {
                return true;
            }
        }
        return false;
    }

    public static boolean otherPlayersNearby() {
        return Players.getLoaded().stream().count() > 1;
    }

    public static void ReduceHpWithRockCake() {
        if (!Inventory.contains(items.dwarvenRock) && !Inventory.contains(items.locatorOrb)) {
            log.error("no rock cake or locator orb");
            return;
        }
        if (Health.getCurrent() > 1) {
            if (Inventory.contains(items.dwarvenRock)) {
                DirectInput.send(MenuAction.forSpriteItem(Inventory.getItems(items.dwarvenRock).first(), "Guzzle"));
            } else if (Inventory.contains(items.locatorOrb)) {
                DirectInput.send(MenuAction.forSpriteItem(Inventory.getItems(items.locatorOrb).first(), "Feel"));
            } else {
                log.error("rock cake error");
            }
        }
    }

    public static InterfaceComponent getQuickPrayerToggle() {
        return (InterfaceComponent) Interfaces.newQuery().containers(new int[]{160}).types(new InterfaceComponent.Type[]{InterfaceComponent.Type.CONTAINER}).actions(new Pattern[]{TOGGLE_ACTION}).results().first();
    }

    public static void DirectInputQuickPrayer() {
        DirectInput.send(MenuAction.forInterfaceComponent(getQuickPrayerToggle(), 0, MenuOpcode.CC_OP));
    }

    public static boolean isDharoks(EquipmentLoadout l) {
        return l != null && l.getDefinition(Equipment.Slot.WEAPON) != null && l.getDefinition(Equipment.Slot.WEAPON).getName().startsWith("Dharok");
    }

    public static boolean ringOfDuelingToEnclave() {
        var rod = Inventory.getItems(items.ringOfDueling).first();
        if (rod == null) return false;
        if (!rod.interact("Rub")) return false;
        Execution.delayUntil(() -> ChatDialog.isOpen(), 5000);
        Keyboard.typeKey("3");
        return Execution.delayUntil(() -> util.ferox.contains(Players.getLocal()), 5000);
    }

    public static boolean restoreAtFerox(EventDispatcher d) {
        var t1 = new Coordinate(3135, 3633);
        var path = BresenhamPath.buildTo(t1);
        if (Players.getLocal().getPosition() != t1 && new GameObjectQueryBuilder().names("Pool of Refreshment").results().isEmpty()) {
            if (path != null) {
                path.step();
                Action.set(Action.Move);
                return false;
            } else {
                log.debug("Could not generate path in traverse to ferox pool");
            }
        }
        var pool = new GameObjectQueryBuilder().names("Pool of Refreshment").results().first();
        if (pool == null) return false;
        var l = new RestoreListener(d);
        DirectInput.send(MenuAction.forGameObject(pool, "Drink"));
        Execution.delayUntil(() -> l.hasRestored(), 15000);
        l.stop();
        Execution.delay(2000, 3000);
        return true;
    }

    public static boolean isAutoRetaliateEnabled() {
        return Varps.getAt(VarpID.AUTO_RETALIATE.getId()).getValue() == 0;
    }

    public static boolean toggleAutoRetaliate() {
        log.debug("toggling auto retaliate");
        if (!ControlPanelTab.COMBAT_OPTIONS.open()) {
            return false;
        }
        final InterfaceComponent component = Interfaces.newQuery()
                .containers(593)
                .types(InterfaceComponent.Type.CONTAINER)
                .actions("Auto retaliate")
                .grandchildren(false)
                .results()
                .first();
        return component != null && component.interact("Auto retaliate");
    }

}
