package com.neck_flexed.scripts.common;

import com.runemate.game.api.hybrid.entities.GameObject;
import com.runemate.game.api.hybrid.entities.Player;
import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.input.direct.MenuAction;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.script.Execution;
import lombok.extern.log4j.Log4j2;

import java.util.concurrent.Callable;
import java.util.function.Predicate;

@Log4j2(topic = "Neck DI")
public class DI {

    public static boolean doDiInteractObstacleReachable(Callable<GameObject> getGameObject, String action, Predicate<Player> playerPredicate) {
        GameObject g;
        try {
            g = getGameObject.call();
        } catch (Exception e) {
            log.error("interact obstacle alt: {}, {}", action, e);
            return false;

        }
        if (g == null) return false;
        var pos = g.getPosition();
        if (pos == null) return false;
        if (!pos.isReachable()) return false;
        return doDiInteractObstacle(getGameObject, action, playerPredicate, 1600, 2400);
    }

    public static boolean doDiInteractObstacleAlt(Predicate<GameObject> doOnlyIf, Callable<GameObject> getGameObject, String action, Predicate<Player> playerPredicate) {
        GameObject g;
        try {
            g = getGameObject.call();
        } catch (Exception e) {
            log.error("interact obstacle alt: {}, {}", action, e);
            return false;

        }
        if (g == null) return false;
        var pos = g.getPosition();
        if (pos == null) return false;
        if (!doOnlyIf.test(g)) return false;
        return doDiInteractObstacle(getGameObject, action, playerPredicate, 1600, 2400);
    }

    public static boolean doDiInteractObstacle(Predicate<Player> doOnlyIf, Callable<GameObject> getGameObject, String action, Predicate<Player> playerPredicate) {
        var p = Players.getLocal();
        if (p == null) return false;
        if (!doOnlyIf.test(p)) return false;
        return doDiInteractObstacle(getGameObject, action, playerPredicate, 1600, 2400);
    }

    public static boolean doDiInteractObstacle(Callable<GameObject> getGameObject, String action, Predicate<Player> playerPredicate) {
        return doDiInteractObstacle(getGameObject, action, playerPredicate, 1600, 2400);
    }

    public static boolean doDiInteractObstacle(Callable<GameObject> getGameObject, String action, Predicate<Player> playerPredicate, int minTimeout, int maxTimeout) {
        GameObject g;
        try {
            g = getGameObject.call();
        } catch (Exception e) {
            log.error("interact obstacle: {}, {}", action, e);
            return false;

        }
        if (g == null) return false;
        var pos = g.getPosition();
        if (pos == null) return false;

        DirectInput.send(MenuAction.forGameObject(g, action));
        var p = Players.getLocal();
        if (p == null) return false;
        Execution.delayUntil(() -> playerPredicate.test(p),
                util::playerAnimatingOrMoving, minTimeout, maxTimeout);
        return true;
    }
}
