package com.neck_flexed.scripts.common.traverse;

import com.neck_flexed.scripts.common.HouseConfig;
import com.neck_flexed.scripts.common.items;
import com.neck_flexed.scripts.common.util;
import com.runemate.game.api.hybrid.entities.GameObject;
import com.runemate.game.api.hybrid.input.direct.DirectInput;
import com.runemate.game.api.hybrid.input.direct.MenuAction;
import com.runemate.game.api.hybrid.local.hud.interfaces.Equipment;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.osrs.local.AchievementDiary;
import com.runemate.game.api.script.Execution;
import lombok.extern.log4j.Log4j2;

import java.util.concurrent.Callable;
import java.util.regex.Pattern;

@Log4j2
public class FairyRingTraverse implements TraverseMethod {
    private final FairyRing fairyRing;

    public FairyRingTraverse(FairyRing fairyRing) {
        this.fairyRing = fairyRing;
    }

    @Override
    public boolean hasSupport(HouseConfig houseConfig) {
        return true;
    }

    @Override
    public boolean doTraverseLoop(HouseConfig houseConfig, Coordinate startPosition) {
        var fr = util.getFairyRing();
        if (fr != null) {
            return fairyRingTo(fr, fairyRing, startPosition);
        }
        if (houseConfig.isHasFairyRing()) {
            util.teleToHouse();
            return false;
        }
        // TODO other fairy ring traverses
        return false;
    }

    private boolean fairyRingTo(GameObject fairyRing, FairyRing destination, Coordinate startPosition) {
        if (Players.getLocal() == null) return false;
        if (fairyRing == null) {
            log.debug("null fairy ring");
            return false;
        }
        if (!AchievementDiary.LUMBRIDGE.isEliteComplete()) {
            if (Equipment.getItems(items.dramenStaff).isEmpty()) {
                util.equipDramen();
                if (!Execution.delayUntil(() -> Equipment.getItems(items.dramenStaff).isEmpty(), 1200))
                    return false;
            }
        }
        var cp = startPosition.getContainingRegionId();
        Callable<Boolean> check = () -> cp != Players.getLocal().getPosition().getContainingRegionId();

        if (destination.isPreviousDestination()) {
            log.debug("fairy ring to last destination");
            var patternLastDest = Pattern.compile(".*ast-destination \\(" + destination.name() + "\\)");
            DirectInput.send(MenuAction.forGameObject(fairyRing, patternLastDest));
            return Execution.delayUntil(check,
                    util::playerAnimating,
                    3500, 4500);
        } else if (FairyRing.isConfigurationOpen()) {
            if (!destination.select()) {
                Execution.delay(1000, 2400);
                return false;
            }
            return Execution.delayUntil(check, 3500, 4500);
        } else {
            log.debug("fairy ring configure");
            if (fairyRing.getActiveDefinition().getActions().contains("Configure"))
                DirectInput.send(MenuAction.forGameObject(fairyRing, "Configure"));
            else
                DirectInput.send(MenuAction.forGameObject(fairyRing, "Ring-configure"));
            Execution.delayUntil(FairyRing::isConfigurationOpen, 2000, 3000);
        }
        return false;
    }
}
