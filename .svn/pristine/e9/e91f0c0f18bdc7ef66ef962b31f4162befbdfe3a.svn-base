package com.neck_flexed.scripts.hydra;

import com.neck_flexed.scripts.common.Instance;
import com.runemate.game.api.hybrid.entities.LocatableEntity;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.location.navigation.Traversal;
import com.runemate.game.api.hybrid.region.SpotAnimations;
import org.jetbrains.annotations.NotNull;

import java.util.stream.Collectors;

public class Phase4Steps implements PhaseSteps {

    private final Coordinate step0;
    private final Coordinate step1;

    public Phase4Steps() {
        var step0 = new Coordinate(1363, 10270, 0);
        var step1 = new Coordinate(1361, 10270, 0);
        this.step0 = Instance.toInstancedFirst(step0);
        this.step1 = Instance.toInstancedFirst(step1);
    }

    @Override
    public @NotNull PhaseSteps.Step GetNextStep(int idx) {
        if (!Traversal.isRunEnabled())
            Traversal.toggleRun();
        if (idx % 2 == 0) {
            return new Step(0, HydraListener::isSpecialNextTick, h -> {
                var area = h.getHydra().getNpc().getArea();
                if (area == null) return step0;
                var danger = SpotAnimations.newQuery()
                        .ids(c.HYDRA_POISON_SPOT, c.HYDRA_FLAME_SPOT)
                        .results().stream().map(LocatableEntity::getPosition).collect(Collectors.toList());
                if (!area.contains(step0) && danger.stream().noneMatch(c -> c.equals(step0))) {
                    return step0;
                }

                var bestFirst = area.getTopLeft().derive(-1, 0);
                if (danger.stream().anyMatch(c -> c.equals(bestFirst))) {
                    for (int y = 0; y < bestFirst.getY(); y++) {
                        int finalY = y;
                        if (danger.stream().noneMatch(c -> c.equals(bestFirst.derive(0, finalY)))) {
                            return bestFirst.derive(0, y);
                        }
                    }
                }
                return step0;
            });
        } else {
            return new Step(1, h -> h.getHydra().getNextSpecialRelative() <= 3 && h.getHydra().getNextSpecialRelative() >= 1,
                    h -> {
                        var area = h.getHydra().getNpc().getArea();
                        if (area == null) return step0;
                        var danger = SpotAnimations.newQuery()
                                .ids(c.HYDRA_POISON_SPOT, c.HYDRA_FLAME_SPOT)
                                .results().stream().map(LocatableEntity::getPosition).collect(Collectors.toList());
                        if (!area.contains(step0) && danger.stream().noneMatch(c -> c.equals(step0))) {
                            return step1;
                        }

                        var bestSecond = area.getTopLeft().derive(-3, 0);
                        if (danger.stream().anyMatch(c -> c.equals(bestSecond))) {
                            for (int y = 0; y < bestSecond.getY(); y++) {
                                int finalY = y;
                                if (danger.stream().noneMatch(c -> c.equals(bestSecond.derive(0, finalY)))) {
                                    return bestSecond.derive(0, y);
                                }
                            }
                        }
                        return step1;
                    });
        }
    }
}
