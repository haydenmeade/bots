package com.neck_flexed.scripts.slayer.barrage;

import com.neck_flexed.scripts.common.Task;
import com.neck_flexed.scripts.common.traverse.Traverses;
import com.neck_flexed.scripts.slayer.*;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import lombok.Getter;
import lombok.RequiredArgsConstructor;

import java.util.Collection;
import java.util.List;

@RequiredArgsConstructor
@Getter
public enum BarrageMonster implements SlayerMonster {
    DustDevil("Dust devil", "Choke devil", areas.DUST_DEVIL, areas.DUST_DEVIL_1, areas.DUST_DEVIL_2, Task.DUST_DEVILS),
    AbyssalDemon("Abyssal demon", "Greater abyssal demon", areas.ABYSSAL_DEMON, areas.ABYSSAL_DEMON_1, areas.ABYSSAL_DEMON_2, Task.ABYSSAL_DEMONS),
    Nechryael("Greater Nechryael", "Nechryarch", areas.NECH, areas.NECH_1, areas.NECH_2, Task.NECHRYAEL),
    Jelly("Warped Jelly", "Vitreous warped Jelly", areas.JELLY, areas.JELLY_1, areas.JELLY_2, Task.JELLIES),
    ;

    private final String monsterName;
    private final String superiorName;
    private final Area area;
    private final Coordinate tile1;
    private final Coordinate tile2;
    private final Task task;

    public SlayerMonster getMonsterTODOFIX() {
        return Monster.getByEnum(task).orElse(this);
    }

    public Coordinate getTraverseToTile() {
        var m = getMonsterTODOFIX();
        return (this.equals(DustDevil) || m == null) ? null : m.getLocation(null).getTraverseToTile();
    }

    @Override
    public String toString() {
        return this.monsterName;
    }

    @Override
    public String[] getSuperiorNames() {
        return new String[]{this.superiorName};
    }

    @Override
    public Collection<Location> getLocations() {
        return List.of(
                Location.builder()
                        .traverseMethods(Traverses.CATACOMBS_TRAVERSES)
                        .prayer(Prayer.PROTECT_FROM_MELEE)
                        .pathRegions(Traverses.CATACOMBS_REGIONS)
                        .traverseToTile(this.getTraverseToTile())
                        .area(this.area)
                        .cannonSpot(null)
                        .build()
        );
    }

    @Override
    public boolean needsLightSource() {
        return false;
    }

    @Override
    public SlayerFinishItem getFinishItem() {
        return null;
    }

    @Override
    public SlayerProtectionItem getProtection() {
        var m = getMonsterTODOFIX();
        return m != null ? m.getProtection() : null;
    }

    @Override
    public boolean isLeafBladed() {
        return false;
    }

    @Override
    public boolean isBarrageMonster() {
        return true;
    }

    @Override
    public boolean isDragon() {
        return false;
    }

    @Override
    public boolean isPoisonous() {
        return false;
    }

    @Override
    public int getFood() {
        return 1;
    }

    @Override
    public boolean isHoppingDisabled() {
        return false;
    }

    @Override
    public BoneType getBoneType() {
        var m = getMonsterTODOFIX();
        return m != null ? m.getBoneType() : BoneType.None;
    }

    @Override
    public boolean isWyvern() {
        return false;
    }

    @Override
    public String[] getAlternatives() {
        return new String[0];
    }

}
