package com.neck_flexed.scripts.hydra;

import com.neck_flexed.scripts.common.Instance;
import com.runemate.game.api.hybrid.entities.LocatableEntity;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.hybrid.region.SpotAnimations;
import lombok.extern.log4j.Log4j2;
import org.jetbrains.annotations.NotNull;

import java.util.stream.Collectors;

@Log4j2(topic = "Phase3")
public class Phase3MeleeSteps implements PhaseSteps {

    private final Coordinate step0;
    private final Coordinate step1;
    private final Coordinate step2;
    private final Coordinate step3;
    private final Coordinate hydraMiddle;

    public Phase3MeleeSteps() {
        var step0 = new Coordinate(1360, 10268, 0);
        var step1 = new Coordinate(1363, 10272, 0);
        var step2 = new Coordinate(1364, 10271, 0);
        var step3 = new Coordinate(1363, 10270, 0);
        this.step0 = Instance.toInstancedFirst(step0);
        this.step1 = Instance.toInstancedFirst(step1);
        this.step2 = Instance.toInstancedFirst(step2);
        this.step3 = Instance.toInstancedFirst(step3);
        this.hydraMiddle = Instance.toInstancedFirst(new Coordinate(1364, 10265, 0));
    }

    @Override
    public @NotNull PhaseSteps.Step GetNextStep(int idx) {
        switch (idx) {
            case 0:
                return new Step(0, h -> !h.getHydra().getImmunity(), HydraListener::isNotOverVent, step0);
            case 1:
                return new Step(1, h -> h.getHydra().getNpc().getServerPosition().getX() == hydraMiddle.getX(), step1);
            case 2:
                return new Step(2, HydraListener::isFlameSkip, step2);
            case 3:
                return new Step(3, 4, step3);
            default:
                return new Step(4, h -> h.getHydra().getNextSpecialRelative() < 2 || isOnFlame() || h.isFlameSkip(),
                        h -> {
                            var isOnFlame = isOnFlame();
                            if (h.isFlameSkip() && !isOnFlame) {
                                return step3;
                            } else if (isOnFlame || !Players.getLocal().getServerPosition().equals(step3)) {
//                                if (Traversal.isRunEnabled())
//                                    Traversal.toggleRun();
                                var c1 = Instance.toInstancedFirst(new Coordinate(1358, 10277, 0));
                                var c2 = Instance.toInstancedFirst(new Coordinate(1363, 10271, 0));
                                if (c1 == null || c2 == null) return step3;
                                var p = Players.getLocal();
                                if (p == null) return step3;
                                var pos = p.getServerPosition();
                                if (pos == null) return step3;
                                var area = new Area.Rectangular(c1, c2);
                                var danger = SpotAnimations.newQuery()
                                        .within(area)
                                        .results().stream().map(LocatableEntity::getPosition).collect(Collectors.toList());
                                var safeTile = area.getCoordinates().stream()
                                        .filter(c -> danger.stream().noneMatch(d -> d.equals(c)) && c.distanceTo(pos) > 5)
                                        .findFirst();
                                return safeTile.orElse(step3);
                            }
                            return step3;
                        });
        }
    }

    private boolean isOnFlame() {
        return !SpotAnimations.newQuery()
                .on(Players.getLocal().getServerPosition())
                .results().isEmpty();

    }
}
