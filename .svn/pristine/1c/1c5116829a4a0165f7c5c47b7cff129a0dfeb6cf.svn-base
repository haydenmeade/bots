package com.neck_flexed.scripts.slayer;

import com.neck_flexed.scripts.common.NeckBot;
import com.neck_flexed.scripts.common.Task;
import com.neck_flexed.scripts.slayer.state.SlayerState;
import com.runemate.game.api.hybrid.entities.Npc;
import com.runemate.game.api.hybrid.local.hud.interfaces.Chatbox;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.script.framework.listeners.events.MessageEvent;
import com.runemate.ui.setting.open.Settings;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.log4j.Log4j2;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

@Log4j2
public abstract class SlayerBotImpl<TSettings extends Settings> extends NeckBot<TSettings, SlayerState> implements SlayerBot {
    @Getter
    @Setter
    protected SlayerMonster previousTask;
    protected int tasksCompleted = 0;
    @Getter
    private Map<Coordinate, Long> deathTiles = new ConcurrentHashMap<>();
    @Getter
    private Collection<Npc> superiorBlacklist = new ArrayList<>();

    @Override
    public void onMessageReceived(MessageEvent event) {
        super.onMessageReceived(event);
        if (isPaused() || !started) return;
        if (!Objects.equals(event.getType(), Chatbox.Message.Type.SERVER)) return;
        var msg = event.getMessage();
        if (msg == null) return;
        if (msg.equals("That is not your superior creature.")) {
            log.debug("Blacklist superior {}", event);
            this.blacklistNearestSuperior();
        }
    }

    private void blacklistNearestSuperior() {
        var m = Monster.fromSlayerTask(this.barrageTasksAvailable(), this.getOverrideTask());
        if (m.isPresent()) {
            var s = m.get().getSuperior(this);
            if (s == null) return;
            this.getSuperiorBlacklist().add(s.nearest());
        }
    }

    public abstract Task getOverrideTask();

    public abstract boolean barrageTasksAvailable();

    @Override
    public void taskCompleted() {
        this.tasksCompleted++;
        this.getSuperiorBlacklist().clear();
    }

}
