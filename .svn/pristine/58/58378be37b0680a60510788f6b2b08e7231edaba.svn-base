package com.neck_flexed.scripts.dk;

import com.neck_flexed.scripts.common.Action;
import com.neck_flexed.scripts.common.LoopState;
import com.neck_flexed.scripts.common.PrayerFlicker;
import com.neck_flexed.scripts.common.util;
import com.runemate.game.api.hybrid.local.House;
import com.runemate.game.api.hybrid.location.Area;
import com.runemate.game.api.hybrid.location.Coordinate;
import com.runemate.game.api.hybrid.region.Players;
import com.runemate.game.api.hybrid.web.WebPath;
import com.runemate.game.api.osrs.local.hud.interfaces.Prayer;
import com.runemate.game.api.script.Execution;
import com.runemate.game.api.script.framework.core.EventDispatcher;
import lombok.extern.log4j.Log4j2;

@Log4j2(topic = "TraverseState")
public class TraverseState implements LoopState<DkState> {
    private static final Coordinate destTile = new Coordinate(1292, 1253, 0);
    // TODO
    private static final Area dangerArea =
            Area.rectangular(new Coordinate(2814, 9854, 0), new Coordinate(2877, 9802, 0));
    private final PrayerFlicker prayerFlicker;
    private String error;

    public TraverseState(PrayerFlicker prayerFlicker) {
        this.prayerFlicker = prayerFlicker;
    }

    @Override
    public void activate(EventDispatcher d) {
        dk.updateStatus("Traversing");
    }

    @Override
    public DkState deactivate(EventDispatcher d) {
//        if (dk.atLairEntrance() || (dk.isInBossRoomIncludingEntrance() && !dk.isInBossRoom())) {
//            prayerFlicker.setActivePrayers();
//            return DkState.ENTERING_LAIR;
//        } else if (dk.isInBossRoom()) {
//            return DkState.FIGHTING;
//        }
        return DkState.STARTING;
    }

    @Override
    public DkState get() {
        return DkState.TRAVERSING;
    }

    @Override
    public String fatalError() {
        return error;
    }

    @Override
    public boolean done() {
        return destTile.equals(Players.getLocal().getPosition());
//                || dk.isInBossRoom()
//                || dk.isInBossRoomIncludingEntrance()
//                || dk.atLairEntrance();
    }

    @Override
    public void executeLoop() {
        // traverse from bank to dk room entrance.
        // TODO
        if (!House.isInside()) {
            util.teleToHouse();
            Execution.delayUntil(() -> House.isInside(), 5000, 6000);
            return;
        }
        // TODO
        if (dangerArea.contains(Players.getLocal())) {
            prayerFlicker.setActivePrayers(Prayer.PROTECT_FROM_MELEE);
        } else {
            prayerFlicker.setActivePrayers();
        }

        var path = WebPath.buildTo(destTile);
        if (path != null) {
            path.step();
            Action.set(Action.Move);
        } else {
            log.error("Could not generate path to dk lair");
        }
    }
}
