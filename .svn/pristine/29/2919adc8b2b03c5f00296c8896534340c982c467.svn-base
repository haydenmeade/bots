package com.neck_flexed.scripts.cerberus;

import com.neck_flexed.scripts.common.HouseUtil;
import com.neck_flexed.scripts.common.LoopState;
import com.neck_flexed.scripts.common.PrayerFlicker;
import com.neck_flexed.scripts.common.util;
import com.runemate.game.api.hybrid.local.House;
import com.runemate.game.api.hybrid.location.navigation.Traversal;
import com.runemate.game.api.script.framework.core.EventDispatcher;
import lombok.extern.log4j.Log4j2;

@Log4j2(topic = "RestoreState")
public class RestoreState implements LoopState<CerbState> {
    private final PrayerFlicker prayerFlicker;
    private String error;
    private boolean done;
    private EventDispatcher dispatcher;
    private CerbListener cerbListener;

    public RestoreState(PrayerFlicker prayerFlicker, CerbListener cerbListener) {
        this.prayerFlicker = prayerFlicker;
        this.cerbListener = cerbListener;
    }

    @Override
    public void activate(EventDispatcher d) {
        this.dispatcher = d;
        cerb.updateStatus(String.format("Restoring"));
        this.prayerFlicker.setActivePrayers();
        this.cerbListener.reset();
    }

    @Override
    public CerbState deactivate(EventDispatcher d) {
        return CerbState.RESTOCKING;
    }

    @Override
    public CerbState get() {
        return CerbState.RESTORING;
    }

    @Override
    public String fatalError() {
        return this.error;
    }

    @Override
    public boolean done() {
        return done;
    }

    @Override
    public void executeLoop() {
        if (!House.isInside()) {
            util.teleToHouse();
            return;
        }

        if (!HouseUtil.restoreStatsInHouse(dispatcher)) {
            return;
        }

        if (!Traversal.isRunEnabled())
            Traversal.toggleRun();

        this.done = HouseUtil.JbToCastleWars();
    }
}
